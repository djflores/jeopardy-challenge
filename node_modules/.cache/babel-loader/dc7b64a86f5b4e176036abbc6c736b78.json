{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { Component } from 'react';\nimport { AppContext } from '../providers/AppContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nexport default class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      clues: [],\n      isLoading: true,\n      offset: 0\n    };\n  }\n\n  componentDidMount() {\n    let value = this.context;\n\n    try {\n      axios('http://jservice.io/api/categories?count=100').then(async response => {\n        await response.data.map(item => {\n          const {\n            clues_count,\n            id\n          } = item;\n\n          if (clues_count >= value.clueCount && this.state.categories.length < value.categoryCount) {\n            this.setState({\n              categories: this.state.categories.concat(item)\n            });\n            axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n              this.setState({\n                clues: this.state.clues.concat([response.data])\n              });\n              console.log(this.state.clues.length);\n\n              if (this.state.clues.length === value.categoryCount) {\n                this.setState({\n                  isLoading: false\n                });\n              }\n            });\n          }\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  componentDidUpdate() {\n    const context = this.context;\n  }\n\n  render() {\n    const {\n      categories,\n      clues,\n      offset\n    } = this.state;\n    const value = this.context;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, this.state.isLoading ? /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, \"Loading...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    }, categories.map((item, index) => {\n      const {\n        title,\n        id\n      } = item;\n\n      if (clues.length > 0) {\n        const clueArray = clues[index];\n        console.log(index);\n        return /*#__PURE__*/React.createElement(\"ul\", {\n          key: `col-${index}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Box, {\n          category: title,\n          className: \"category\",\n          isCategory: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 41\n          }\n        }), clueArray.map(key => {\n          const {\n            category_id,\n            value,\n            question\n          } = key;\n          return /*#__PURE__*/React.createElement(Box, {\n            category: category_id,\n            value: value,\n            question: question,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 49\n            }\n          });\n        }));\n      } else {\n        return null;\n      }\n    })));\n  }\n\n}\nBoard.contextType = AppContext;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","Component","AppContext","axios","Box","Board","state","categories","clues","isLoading","offset","componentDidMount","value","context","then","response","data","map","item","clues_count","id","clueCount","length","categoryCount","setState","concat","console","log","error","componentDidUpdate","render","index","title","clueArray","key","category_id","question","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AAEA,eAAe,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AAAA;AAAA;AAAA,SAEzCK,KAFyC,GAEjC;AACJC,MAAAA,UAAU,EAAE,EADR;AAEJC,MAAAA,KAAK,EAAE,EAFH;AAGJC,MAAAA,SAAS,EAAE,IAHP;AAIJC,MAAAA,MAAM,EAAE;AAJJ,KAFiC;AAAA;;AAQzCC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,KAAK,GAAG,KAAKC,OAAjB;;AACA,QAAI;AACAV,MAAAA,KAAK,CAAC,6CAAD,CAAL,CAAqDW,IAArD,CACI,MAAOC,QAAP,IAAoB;AAChB,cAAMA,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAmBC,IAAD,IAAU;AAC9B,gBAAM;AAAEC,YAAAA,WAAF;AAAeC,YAAAA;AAAf,cAAsBF,IAA5B;;AACA,cACIC,WAAW,IAAIP,KAAK,CAACS,SAArB,IACA,KAAKf,KAAL,CAAWC,UAAX,CAAsBe,MAAtB,GAA+BV,KAAK,CAACW,aAFzC,EAGE;AACE,iBAAKC,QAAL,CAAc;AACVjB,cAAAA,UAAU,EAAE,KAAKD,KAAL,CAAWC,UAAX,CAAsBkB,MAAtB,CAA6BP,IAA7B;AADF,aAAd;AAIAf,YAAAA,KAAK,CACA,yCAAwCiB,EAAG,EAD3C,CAAL,CAEEN,IAFF,CAEQC,QAAD,IAAc;AACjB,mBAAKS,QAAL,CAAc;AACVhB,gBAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KAAX,CAAiBiB,MAAjB,CAAwB,CAC3BV,QAAQ,CAACC,IADkB,CAAxB;AADG,eAAd;AAKAU,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAKrB,KAAL,CAAWE,KAAX,CAAiBc,MAA7B;;AACA,kBACI,KAAKhB,KAAL,CAAWE,KAAX,CAAiBc,MAAjB,KACAV,KAAK,CAACW,aAFV,EAGE;AACE,qBAAKC,QAAL,CAAc;AACVf,kBAAAA,SAAS,EAAE;AADD,iBAAd;AAGH;AACJ,aAjBD;AAkBH;AACJ,SA7BK,CAAN;AA8BH,OAhCL;AAkCH,KAnCD,CAmCE,OAAOmB,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACJ;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB,UAAMhB,OAAO,GAAG,KAAKA,OAArB;AACH;;AAEDiB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEvB,MAAAA,UAAF;AAAcC,MAAAA,KAAd;AAAqBE,MAAAA;AAArB,QAAgC,KAAKJ,KAA3C;AACA,UAAMM,KAAK,GAAG,KAAKC,OAAnB;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKP,KAAL,CAAWG,SAAX,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADH,gBAGG,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKF,UAAU,CAACU,GAAX,CAAe,CAACC,IAAD,EAAOa,KAAP,KAAiB;AAC7B,YAAM;AAAEC,QAAAA,KAAF;AAASZ,QAAAA;AAAT,UAAgBF,IAAtB;;AACA,UAAIV,KAAK,CAACc,MAAN,GAAe,CAAnB,EAAsB;AAClB,cAAMW,SAAS,GAAGzB,KAAK,CAACuB,KAAD,CAAvB;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACA,4BACI;AAAI,UAAA,GAAG,EAAG,OAAMA,KAAM,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,GAAD;AACI,UAAA,QAAQ,EAAEC,KADd;AAEI,UAAA,SAAS,EAAC,UAFd;AAGI,UAAA,UAAU,EAAE,IAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAMKC,SAAS,CAAChB,GAAV,CAAeiB,GAAD,IAAS;AACpB,gBAAM;AACFC,YAAAA,WADE;AAEFvB,YAAAA,KAFE;AAGFwB,YAAAA;AAHE,cAIFF,GAJJ;AAKA,8BACI,oBAAC,GAAD;AACI,YAAA,QAAQ,EAAEC,WADd;AAEI,YAAA,KAAK,EAAEvB,KAFX;AAGI,YAAA,QAAQ,EAAEwB,QAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,SAbA,CANL,CADJ;AAuBH,OA1BD,MA0BO;AACH,eAAO,IAAP;AACH;AACJ,KA/BA,CADL,CAJR,CADJ;AA0CH;;AApGwC;AAAxB/B,K,CACVgC,W,GAAcnC,U","sourcesContent":["import React, { Component } from 'react';\nimport { AppContext } from '../providers/AppContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\n\nexport default class Board extends Component {\n    static contextType = AppContext;\n    state = {\n        categories: [],\n        clues: [],\n        isLoading: true,\n        offset: 0,\n    };\n    componentDidMount() {\n        let value = this.context;\n        try {\n            axios('http://jservice.io/api/categories?count=100').then(\n                async (response) => {\n                    await response.data.map((item) => {\n                        const { clues_count, id } = item;\n                        if (\n                            clues_count >= value.clueCount &&\n                            this.state.categories.length < value.categoryCount\n                        ) {\n                            this.setState({\n                                categories: this.state.categories.concat(item),\n                            });\n\n                            axios(\n                                `http://jservice.io/api/clues?category=${id}`\n                            ).then((response) => {\n                                this.setState({\n                                    clues: this.state.clues.concat([\n                                        response.data,\n                                    ]),\n                                });\n                                console.log(this.state.clues.length);\n                                if (\n                                    this.state.clues.length ===\n                                    value.categoryCount\n                                ) {\n                                    this.setState({\n                                        isLoading: false,\n                                    });\n                                }\n                            });\n                        }\n                    });\n                }\n            );\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    componentDidUpdate() {\n        const context = this.context;\n    }\n\n    render() {\n        const { categories, clues, offset } = this.state;\n        const value = this.context;\n\n        return (\n            <div className=\"Board\">\n                {this.state.isLoading ? (\n                    <h2>Loading...</h2>\n                ) : (\n                    <React.Fragment>\n                        {categories.map((item, index) => {\n                            const { title, id } = item;\n                            if (clues.length > 0) {\n                                const clueArray = clues[index];\n                                console.log(index);\n                                return (\n                                    <ul key={`col-${index}`}>\n                                        <Box\n                                            category={title}\n                                            className=\"category\"\n                                            isCategory={true}\n                                        />\n                                        {clueArray.map((key) => {\n                                            const {\n                                                category_id,\n                                                value,\n                                                question,\n                                            } = key;\n                                            return (\n                                                <Box\n                                                    category={category_id}\n                                                    value={value}\n                                                    question={question}\n                                                />\n                                            );\n                                        })}\n                                    </ul>\n                                );\n                            } else {\n                                return null;\n                            }\n                        })}\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../context/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\n\nconst Board = props => {\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  const {\n    categories,\n    clues,\n    dailyDouble,\n    isLoading,\n    offset\n  } = state;\n  const {\n    categoryCount,\n    clueCount\n  } = props.location.state;\n  const [randomId, setRandomId] = useState();\n  const [randomClue, setRandomClue] = useState();\n  const rand = Math.floor(Math.random() * categoryCount); //const randomClue = Math.floor(Math.random() * clueCount);\n\n  useEffect(() => {\n    if (state.categories.length > 0 && state.clues.length > 0) {} else {\n      fetchData();\n    }\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      axios(`http://jservice.io/api/categories?count=${offset}`).then(async response => {\n        await response.data.map((item, index) => {\n          const {\n            clues_count,\n            id\n          } = item;\n\n          if (clues_count >= clueCount && categories.length <= categoryCount) {\n            dispatch({\n              type: 'setCategories',\n              payload: item\n            });\n            axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n              dispatch({\n                type: 'setClues',\n                payload: response.data\n              }, {\n                type: 'isLoading',\n                payload: false\n              });\n            });\n          }\n\n          if (rand === index) {\n            dispatch({\n              type: 'dailyDouble',\n              payload: id\n            });\n          }\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const resetBoard = () => {\n    let reset = window.confirm('Are you sure you want to restart?');\n\n    if (reset) {\n      dispatch({\n        type: 'reset'\n      });\n      props.history.push({\n        pathname: '/'\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, \"Creating...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetBoard,\n    className: \"reset-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, \"reset\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, categories.map((item, index) => {\n    const {\n      title,\n      id\n    } = item;\n    const clueArray = clues[index];\n\n    if (randomId === id) {\n      setRandomClue(Math.floor(Math.random() * clueCount));\n    }\n\n    if (index < categoryCount) {\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        key: `col-${index}`,\n        className: \"list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        category: title,\n        className: \"category\",\n        isCategory: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 41\n        }\n      }), clueArray ? clueArray.map((key, index) => {\n        const {\n          value,\n          question,\n          answer,\n          category,\n          id\n        } = key;\n        const {\n          title\n        } = category;\n        const selected = state.answeredClues.includes(id);\n\n        if (index < props.location.state.clueCount) {\n          return /*#__PURE__*/React.createElement(Box, {\n            id: id,\n            value: value,\n            question: question,\n            answer: answer,\n            title: title,\n            selected: selected,\n            dailyDouble: randomClue === index ? true : false,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 59\n            }\n          });\n        }\n      }) : '');\n    } else {\n      return '';\n    }\n  }))));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","useContext","useEffect","useState","AppContext","axios","Box","Board","props","state","dispatch","categories","clues","dailyDouble","isLoading","offset","categoryCount","clueCount","location","randomId","setRandomId","randomClue","setRandomClue","rand","Math","floor","random","length","fetchData","then","response","data","map","item","index","clues_count","id","type","payload","error","console","log","resetBoard","reset","window","confirm","history","push","pathname","title","clueArray","key","value","question","answer","category","selected","answeredClues","includes"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../context/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\n\nconst Board = (props) => {\n    const { state, dispatch } = useContext(AppContext);\n    const { categories, clues, dailyDouble, isLoading, offset } = state;\n    const { categoryCount, clueCount } = props.location.state;\n    const [randomId, setRandomId] = useState();\n    const [randomClue, setRandomClue] = useState();\n    const rand = Math.floor(Math.random() * categoryCount);\n    //const randomClue = Math.floor(Math.random() * clueCount);\n\n    useEffect(() => {\n        if (state.categories.length > 0 && state.clues.length > 0) {\n        } else {\n            fetchData();\n        }\n    }, []);\n\n    const fetchData = async () => {\n        try {\n            axios(`http://jservice.io/api/categories?count=${offset}`).then(async (response) => {\n                await response.data.map((item, index) => {\n                    const { clues_count, id } = item;\n\n                    if (clues_count >= clueCount && categories.length <= categoryCount) {\n                        dispatch({\n                            type: 'setCategories',\n                            payload: item,\n                        });\n\n                        axios(`http://jservice.io/api/clues?category=${id}`).then((response) => {\n                            dispatch(\n                                {\n                                    type: 'setClues',\n                                    payload: response.data,\n                                },\n                                {\n                                    type: 'isLoading',\n                                    payload: false,\n                                }\n                            );\n                        });\n                    }\n                    if (rand === index) {\n                        dispatch({\n                            type: 'dailyDouble',\n                            payload: id,\n                        });\n                    }\n                });\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const resetBoard = () => {\n        let reset = window.confirm('Are you sure you want to restart?');\n        if (reset) {\n            dispatch({ type: 'reset' });\n            props.history.push({ pathname: '/' });\n        }\n    };\n\n    return (\n        <div className=\"Board\">\n            {isLoading ? (\n                <h2>Creating...</h2>\n            ) : (\n                <React.Fragment>\n                    <button onClick={resetBoard} className=\"reset-btn\">\n                        reset\n                    </button>\n                    <div className=\"board-container\">\n                        {categories.map((item, index) => {\n                            const { title, id } = item;\n                            const clueArray = clues[index];\n                            if (randomId === id) {\n                                setRandomClue(Math.floor(Math.random() * clueCount));\n                            }\n                            if (index < categoryCount) {\n                                return (\n                                    <ul key={`col-${index}`} className=\"list\">\n                                        <Box category={title} className=\"category\" isCategory={true} />\n                                        {clueArray\n                                            ? clueArray.map((key, index) => {\n                                                  const { value, question, answer, category, id } = key;\n                                                  const { title } = category;\n                                                  const selected = state.answeredClues.includes(id);\n\n                                                  if (index < props.location.state.clueCount) {\n                                                      return (\n                                                          <Box\n                                                              id={id}\n                                                              value={value}\n                                                              question={question}\n                                                              answer={answer}\n                                                              title={title}\n                                                              selected={selected}\n                                                              dailyDouble={randomClue === index ? true : false}\n                                                          />\n                                                      );\n                                                  }\n                                              })\n                                            : ''}\n                                    </ul>\n                                );\n                            } else {\n                                return '';\n                            }\n                        })}\n                    </div>\n                </React.Fragment>\n            )}\n        </div>\n    );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}
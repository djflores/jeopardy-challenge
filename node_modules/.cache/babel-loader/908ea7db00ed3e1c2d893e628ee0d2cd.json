{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { useContext, useEffect } from 'react';\nimport AppContext from '../context/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\n\nconst Board = props => {\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  const {\n    categories,\n    clues,\n    dailyDouble,\n    isLoading,\n    offset\n  } = state;\n  const {\n    categoryCount,\n    clueCount\n  } = props.location.state;\n  useEffect(() => {\n    if (state.categories.length > 0 && state.clues.length > 0) {} else {\n      fetchData();\n    }\n  }, []);\n\n  const fetchData = async () => {\n    // const dailyDouble = Math.floor(Math.random() * state.clueCount);\n    // state.dailyDouble(dailyDouble);\n    try {\n      axios(`http://jservice.io/api/categories?count=${offset}`).then(async response => {\n        await response.data.map((item, index) => {\n          const {\n            clues_count,\n            id\n          } = item;\n          console.log(clues_count, clueCount);\n\n          if (index < categoryCount) {\n            console.log(item);\n            dispatch({\n              type: 'setCategories',\n              payload: item\n            });\n            axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n              dispatch({\n                type: 'setClues',\n                payload: response.data\n              });\n              dispatch({\n                type: 'isLoading',\n                payload: false\n              });\n            });\n          }\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const resetBoard = () => {\n    let reset = window.confirm('Are you sure you want to restart?');\n\n    if (reset) {\n      dispatch({\n        type: 'reset'\n      });\n      props.history.push({\n        pathname: '/'\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, \"Creating...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetBoard,\n    className: \"reset-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, \"reset\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, categories.map((item, index) => {\n    const {\n      title\n    } = item;\n    const clueArray = clues[index];\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      key: `col-${index}`,\n      className: \"list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      category: title,\n      className: \"category\",\n      isCategory: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 37\n      }\n    }), clueArray ? clueArray.map((key, index) => {\n      const {\n        value,\n        question,\n        answer,\n        category,\n        id\n      } = key;\n      const {\n        title\n      } = category;\n      const selected = state.answeredClues.includes(id);\n\n      if (index < props.location.state.clueCount) {\n        return /*#__PURE__*/React.createElement(Box, {\n          id: id,\n          value: value,\n          question: question,\n          answer: answer,\n          title: title,\n          selected: selected,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 55\n          }\n        });\n      }\n    }) : '');\n  }))));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","useContext","useEffect","AppContext","axios","Box","Board","props","state","dispatch","categories","clues","dailyDouble","isLoading","offset","categoryCount","clueCount","location","length","fetchData","then","response","data","map","item","index","clues_count","id","console","log","type","payload","error","resetBoard","reset","window","confirm","history","push","pathname","title","clueArray","key","value","question","answer","category","selected","answeredClues","includes"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport AppContext from '../context/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\n\nconst Board = (props) => {\n    const { state, dispatch } = useContext(AppContext);\n    const { categories, clues, dailyDouble, isLoading, offset } = state;\n    const { categoryCount, clueCount } = props.location.state;\n\n    useEffect(() => {\n        if (state.categories.length > 0 && state.clues.length > 0) {\n        } else {\n            fetchData();\n        }\n    }, []);\n\n    const fetchData = async () => {\n        // const dailyDouble = Math.floor(Math.random() * state.clueCount);\n        // state.dailyDouble(dailyDouble);\n\n        try {\n            axios(`http://jservice.io/api/categories?count=${offset}`).then(async (response) => {\n                await response.data.map((item, index) => {\n                    const { clues_count, id } = item;\n                    console.log(clues_count, clueCount);\n\n                    if (index < categoryCount) {\n                        console.log(item);\n\n                        dispatch({\n                            type: 'setCategories',\n                            payload: item,\n                        });\n\n                        axios(`http://jservice.io/api/clues?category=${id}`).then((response) => {\n                            dispatch({\n                                type: 'setClues',\n                                payload: response.data,\n                            });\n\n                            dispatch({\n                                type: 'isLoading',\n                                payload: false,\n                            });\n                        });\n                    }\n                });\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const resetBoard = () => {\n        let reset = window.confirm('Are you sure you want to restart?');\n        if (reset) {\n            dispatch({ type: 'reset' });\n            props.history.push({ pathname: '/' });\n        }\n    };\n\n    return (\n        <div className=\"Board\">\n            {isLoading ? (\n                <h2>Creating...</h2>\n            ) : (\n                <React.Fragment>\n                    <button onClick={resetBoard} className=\"reset-btn\">\n                        reset\n                    </button>\n                    <div className=\"board-container\">\n                        {categories.map((item, index) => {\n                            const { title } = item;\n                            const clueArray = clues[index];\n                            return (\n                                <ul key={`col-${index}`} className=\"list\">\n                                    <Box category={title} className=\"category\" isCategory={true} />\n                                    {clueArray\n                                        ? clueArray.map((key, index) => {\n                                              const { value, question, answer, category, id } = key;\n                                              const { title } = category;\n                                              const selected = state.answeredClues.includes(id);\n                                              if (index < props.location.state.clueCount) {\n                                                  return (\n                                                      <Box\n                                                          id={id}\n                                                          value={value}\n                                                          question={question}\n                                                          answer={answer}\n                                                          title={title}\n                                                          selected={selected}\n                                                      />\n                                                  );\n                                              }\n                                          })\n                                        : ''}\n                                </ul>\n                            );\n                        })}\n                    </div>\n                </React.Fragment>\n            )}\n        </div>\n    );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}
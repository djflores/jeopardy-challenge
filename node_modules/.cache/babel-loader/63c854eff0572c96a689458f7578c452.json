{"ast":null,"code":"const initialState = {\n  categories: [],\n  clues: [],\n  validBoard: false,\n  dailyDouble: 0,\n  answeredClues: [],\n  isLoading: true\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n\n    case 'setCategories':\n      return { ...state,\n        categories: [...state.categories, action.payload]\n      };\n\n    case 'setClues':\n      return { ...state,\n        clues: [...state.clues, action.payload]\n      };\n\n    case 'answeredClues':\n      return { ...state,\n        answeredClues: [...state.answeredClues, action.payload]\n      };\n\n    case 'isLoading':\n      return { ...state,\n        isLoading: action.payload\n      };\n\n    case 'increaseOffset':\n      return state.offset + 100;\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/context/reducer.js"],"names":["initialState","categories","clues","validBoard","dailyDouble","answeredClues","isLoading","reducer","state","action","type","payload","offset"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,UAAU,EAAE,KAHK;AAIjBC,EAAAA,WAAW,EAAE,CAJI;AAKjBC,EAAAA,aAAa,EAAE,EALE;AAMjBC,EAAAA,SAAS,EAAE;AANM,CAArB;;AASA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,OAAL;AACI,aAAOV,YAAP;;AACJ,SAAK,eAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHP,QAAAA,UAAU,EAAE,CAAC,GAAGO,KAAK,CAACP,UAAV,EAAsBQ,MAAM,CAACE,OAA7B;AAFT,OAAP;;AAIJ,SAAK,UAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHN,QAAAA,KAAK,EAAE,CAAC,GAAGM,KAAK,CAACN,KAAV,EAAiBO,MAAM,CAACE,OAAxB;AAFJ,OAAP;;AAIJ,SAAK,eAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHH,QAAAA,aAAa,EAAE,CAAC,GAAGG,KAAK,CAACH,aAAV,EAAyBI,MAAM,CAACE,OAAhC;AAFZ,OAAP;;AAIJ,SAAK,WAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHF,QAAAA,SAAS,EAAEG,MAAM,CAACE;AAFf,OAAP;;AAIJ,SAAK,gBAAL;AACI,aAAOH,KAAK,CAACI,MAAN,GAAe,GAAtB;;AACJ;AACI,aAAOJ,KAAP;AA1BR;AA4BH,CA7BD;;AA+BA,eAAeD,OAAf","sourcesContent":["const initialState = {\n    categories: [],\n    clues: [],\n    validBoard: false,\n    dailyDouble: 0,\n    answeredClues: [],\n    isLoading: true,\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'reset':\n            return initialState;\n        case 'setCategories':\n            return {\n                ...state,\n                categories: [...state.categories, action.payload],\n            };\n        case 'setClues':\n            return {\n                ...state,\n                clues: [...state.clues, action.payload],\n            };\n        case 'answeredClues':\n            return {\n                ...state,\n                answeredClues: [...state.answeredClues, action.payload],\n            };\n        case 'isLoading':\n            return {\n                ...state,\n                isLoading: action.payload,\n            };\n        case 'increaseOffset':\n            return state.offset + 100;\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}
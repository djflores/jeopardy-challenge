{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/components/Box.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { AppContext } from '../providers/AppContext';\nexport default class Box extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isCategory: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props;\n    const context = this.context;\n    let count = context.offset;\n\n    if (this.state.isCategory === false) {\n      axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n        console.log(response.data);\n        this.setState({\n          clue: response.data\n        });\n      });\n    }\n\n    count = count + 1;\n    context.setOffset(count);\n  }\n\n  renderBox() {\n    const {\n      isCategory\n    } = this.props;\n    const context = this.context;\n    const {\n      clue\n    } = this.state;\n    console.log(clue);\n\n    if (isCategory) {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 20\n        }\n      }, this.props.category);\n    } else {\n      return Array(context.clueCount).fill(this.state.clue.map((item, index) => {\n        console.log(item);\n        return /*#__PURE__*/React.createElement(\"li\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 28\n          }\n        });\n      }));\n    }\n  }\n\n  render() {\n    return this.renderBox();\n  }\n\n}\nBox.contextType = AppContext;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/components/Box.js"],"names":["React","Component","axios","AppContext","Box","state","isCategory","componentDidMount","id","props","context","count","offset","then","response","console","log","data","setState","clue","setOffset","renderBox","category","Array","clueCount","fill","map","item","index","render","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AAEA,eAAe,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAEvCI,KAFuC,GAE/B;AACJC,MAAAA,UAAU,EAAE;AADR,KAF+B;AAAA;;AAMvCC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEC,MAAAA;AAAF,QAAS,KAAKC,KAApB;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB;AACA,QAAIC,KAAK,GAAGD,OAAO,CAACE,MAApB;;AAEA,QAAI,KAAKP,KAAL,CAAWC,UAAX,KAA0B,KAA9B,EAAqC;AACjCJ,MAAAA,KAAK,CAAE,yCAAwCM,EAAG,EAA7C,CAAL,CAAqDK,IAArD,CACKC,QAAD,IAAc;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACA,aAAKC,QAAL,CAAc;AACVC,UAAAA,IAAI,EAAEL,QAAQ,CAACG;AADL,SAAd;AAGH,OANL;AAQH;;AACDN,IAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACAD,IAAAA,OAAO,CAACU,SAAR,CAAkBT,KAAlB;AACH;;AAEDU,EAAAA,SAAS,GAAG;AACR,UAAM;AAAEf,MAAAA;AAAF,QAAiB,KAAKG,KAA5B;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB;AACA,UAAM;AAAES,MAAAA;AAAF,QAAW,KAAKd,KAAtB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;;AACA,QAAIb,UAAJ,EAAgB;AACZ,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKG,KAAL,CAAWa,QAAhB,CAAP;AACH,KAFD,MAEO;AACH,aAAOC,KAAK,CAACb,OAAO,CAACc,SAAT,CAAL,CAAyBC,IAAzB,CACH,KAAKpB,KAAL,CAAWc,IAAX,CAAgBO,GAAhB,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjCb,QAAAA,OAAO,CAACC,GAAR,CAAYW,IAAZ;AACA,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAHD,CADG,CAAP;AAMH;AACJ;;AAEDE,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKR,SAAL,EAAP;AACH;;AA5CsC;AAAtBjB,G,CACV0B,W,GAAc3B,U","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { AppContext } from '../providers/AppContext';\n\nexport default class Box extends Component {\n    static contextType = AppContext;\n    state = {\n        isCategory: false,\n    };\n\n    componentDidMount() {\n        const { id } = this.props;\n        const context = this.context;\n        let count = context.offset;\n\n        if (this.state.isCategory === false) {\n            axios(`http://jservice.io/api/clues?category=${id}`).then(\n                (response) => {\n                    console.log(response.data);\n                    this.setState({\n                        clue: response.data,\n                    });\n                }\n            );\n        }\n        count = count + 1;\n        context.setOffset(count);\n    }\n\n    renderBox() {\n        const { isCategory } = this.props;\n        const context = this.context;\n        const { clue } = this.state;\n        console.log(clue);\n        if (isCategory) {\n            return <li>{this.props.category}</li>;\n        } else {\n            return Array(context.clueCount).fill(\n                this.state.clue.map((item, index) => {\n                    console.log(item);\n                    return <li></li>;\n                })\n            );\n        }\n    }\n\n    render() {\n        return this.renderBox();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
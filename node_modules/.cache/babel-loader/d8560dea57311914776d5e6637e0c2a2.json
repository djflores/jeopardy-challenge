{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../context/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nconst Board = props => {\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  const {\n    categories,\n    clues,\n    clueCount,\n    dailyDouble\n  } = state;\n  const [boardState, setBoardState] = useState({\n    categories: [],\n    clues: [],\n    isLoading: true,\n    offset: 0\n  });\n  useEffect(() => {\n    console.log('adasdsds');\n\n    if (state.categories.length > 0 && state.clues.length > 0) {} else {\n      fetchData();\n    }\n  }, []);\n\n  const fetchData = async () => {\n    // const dailyDouble = Math.floor(Math.random() * state.clueCount);\n    // state.dailyDouble(dailyDouble);\n    try {\n      axios('http://jservice.io/api/categories?count=100').then(async response => {\n        await response.data.map((item, index) => {\n          const {\n            clues_count,\n            id\n          } = item;\n\n          if (clues_count >= props.location.state.clueCount && index < props.location.state.categoryCount) {\n            dispatch({\n              type: 'setCategories',\n              payload: item\n            });\n            axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n              dispatch({\n                type: 'setClues',\n                payload: response.data\n              });\n              setBoardState({\n                isLoading: false\n              });\n            });\n          }\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const resetBoard = () => {\n    let reset = window.confirm('Are you sure you want to restart?');\n\n    if (reset) {\n      this.props.history.push({\n        pathname: '/'\n      });\n    }\n  }; //const { categories, clueCount, clues } = state;\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, boardState.isLoading ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, \"Creating...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, categories.map((item, index) => {\n    console.log(index);\n    const {\n      title\n    } = item;\n\n    if (clues.length > 0) {\n      const clueArray = clues[index];\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        key: `col-${index}`,\n        className: \"list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        category: title,\n        className: \"category\",\n        isCategory: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 37\n        }\n      }), clueArray.map((key, index) => {\n        const {\n          value,\n          question,\n          answer,\n          category,\n          id\n        } = key;\n        const {\n          title\n        } = category;\n        const selected = state.answeredClues.includes(id);\n\n        if (index < clueCount) {\n          return /*#__PURE__*/React.createElement(Box, {\n            id: id,\n            value: value,\n            question: question,\n            answer: answer,\n            title: title,\n            selected: selected,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 49\n            }\n          });\n        } else {\n          return null;\n        }\n      }));\n    } else {\n      return null;\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      if (window.confirm('Are you sure you want to restart?')) {\n        this.props.history.push('/');\n        state.setLoading(true);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, \"reset\")));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","useContext","useEffect","useState","AppContext","axios","Box","withRouter","Board","props","state","dispatch","categories","clues","clueCount","dailyDouble","boardState","setBoardState","isLoading","offset","console","log","length","fetchData","then","response","data","map","item","index","clues_count","id","location","categoryCount","type","payload","error","resetBoard","reset","window","confirm","history","push","pathname","title","clueArray","key","value","question","answer","category","selected","answeredClues","includes","setLoading"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../context/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nconst Board = (props) => {\n    const { state, dispatch } = useContext(AppContext);\n    const { categories, clues, clueCount, dailyDouble } = state;\n    const [boardState, setBoardState] = useState({\n        categories: [],\n        clues: [],\n        isLoading: true,\n        offset: 0,\n    });\n\n    useEffect(() => {\n        console.log('adasdsds');\n        if (state.categories.length > 0 && state.clues.length > 0) {\n        } else {\n            fetchData();\n        }\n    }, []);\n\n    const fetchData = async () => {\n        // const dailyDouble = Math.floor(Math.random() * state.clueCount);\n        // state.dailyDouble(dailyDouble);\n\n        try {\n            axios('http://jservice.io/api/categories?count=100').then(\n                async (response) => {\n                    await response.data.map((item, index) => {\n                        const { clues_count, id } = item;\n                        if (\n                            clues_count >= props.location.state.clueCount &&\n                            index < props.location.state.categoryCount\n                        ) {\n                            dispatch({\n                                type: 'setCategories',\n                                payload: item,\n                            });\n                            axios(\n                                `http://jservice.io/api/clues?category=${id}`\n                            ).then((response) => {\n                                dispatch({\n                                    type: 'setClues',\n                                    payload: response.data,\n                                });\n\n                                setBoardState({ isLoading: false });\n                            });\n                        }\n                    });\n                }\n            );\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const resetBoard = () => {\n        let reset = window.confirm('Are you sure you want to restart?');\n        if (reset) {\n            this.props.history.push({ pathname: '/' });\n        }\n    };\n\n    //const { categories, clueCount, clues } = state;\n\n    return (\n        <div className=\"Board\">\n            {boardState.isLoading ? (\n                <h2>Creating...</h2>\n            ) : (\n                <React.Fragment>\n                    {categories.map((item, index) => {\n                        console.log(index);\n                        const { title } = item;\n                        if (clues.length > 0) {\n                            const clueArray = clues[index];\n                            return (\n                                <ul key={`col-${index}`} className=\"list\">\n                                    <Box\n                                        category={title}\n                                        className=\"category\"\n                                        isCategory={true}\n                                    />\n                                    {clueArray.map((key, index) => {\n                                        const {\n                                            value,\n                                            question,\n                                            answer,\n                                            category,\n                                            id,\n                                        } = key;\n                                        const { title } = category;\n                                        const selected = state.answeredClues.includes(\n                                            id\n                                        );\n\n                                        if (index < clueCount) {\n                                            return (\n                                                <Box\n                                                    id={id}\n                                                    value={value}\n                                                    question={question}\n                                                    answer={answer}\n                                                    title={title}\n                                                    selected={selected}\n                                                />\n                                            );\n                                        } else {\n                                            return null;\n                                        }\n                                    })}\n                                </ul>\n                            );\n                        } else {\n                            return null;\n                        }\n                    })}\n                    <button\n                        onClick={() => {\n                            if (\n                                window.confirm(\n                                    'Are you sure you want to restart?'\n                                )\n                            ) {\n                                this.props.history.push('/');\n                                state.setLoading(true);\n                            }\n                        }}\n                    >\n                        reset\n                    </button>\n                </React.Fragment>\n            )}\n        </div>\n    );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}
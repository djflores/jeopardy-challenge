{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/providers/GlobalState.js\";\nimport React, { createContext, useReducer, useState } from 'react';\nimport AppContext from './appContext';\nconst initialState = {\n  categories: [],\n  clues: [],\n  validBoard: false,\n  offset: 0,\n  dailyDouble: 0,\n  answeredClues: [],\n  isLoading: true\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n\n    case 'categories':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nconst AppState = props => {\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      state: 'asdasda'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default AppState; // export const GlobalState = createContext();\n// const reducer = (state, action) => {\n//     switch (action.type) {\n//         case 'reset':\n//             return initialState;\n//         case 'categories':\n//             return action.payload;\n//         default:\n//             return state;\n//     }\n// };\n// export const AppProvider = (children) => {\n//     const [state, dispatch] = useState(initialState);\n//     // const [clueCount, setClueCount] = useState();\n//     // const [categoryCount, setCategoryCount] = useState([]);\n//     // const [categories, setCategories] = useState([]);\n//     // const [clues, setClues] = useState([]);\n//     // const [validBoard, setValidBoard] = useState(false);\n//     // const [offset, setOffset] = useState(0);\n//     // const [dailyDouble, setDailyDouble] = useState();\n//     // const [answeredClues, setAnsweredClues] = useState([]);\n//     // const [isLoading, setLoading] = useState(true);\n//     // const [initialState, setInitialState] = useState();\n//     return (\n//         <GlobalState.Provider value={{ state, dispatch }}>\n//             {children}\n//         </GlobalState.Provider>\n//     );\n// };","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/providers/GlobalState.js"],"names":["React","createContext","useReducer","useState","AppContext","initialState","categories","clues","validBoard","offset","dailyDouble","answeredClues","isLoading","reducer","state","action","type","payload","AppState","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,UAAU,EAAE,KAHK;AAIjBC,EAAAA,MAAM,EAAE,CAJS;AAKjBC,EAAAA,WAAW,EAAE,CALI;AAMjBC,EAAAA,aAAa,EAAE,EANE;AAOjBC,EAAAA,SAAS,EAAE;AAPM,CAArB;;AAUA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,OAAL;AACI,aAAOX,YAAP;;AACJ,SAAK,YAAL;AACI,aAAOU,MAAM,CAACE,OAAd;;AACJ;AACI,aAAOH,KAAP;AANR;AAQH,CATD;;AAWA,MAAMI,QAAQ,GAAIC,KAAD,IAAW;AACxB,sBACI,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEL,MAAAA,KAAK,EAAE;AAAT,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKK,KAAK,CAACC,QADX,CADJ;AAKH,CAND;;AAQA,eAAeF,QAAf,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { createContext, useReducer, useState } from 'react';\nimport AppContext from './appContext';\n\nconst initialState = {\n    categories: [],\n    clues: [],\n    validBoard: false,\n    offset: 0,\n    dailyDouble: 0,\n    answeredClues: [],\n    isLoading: true,\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'reset':\n            return initialState;\n        case 'categories':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nconst AppState = (props) => {\n    return (\n        <AppContext.Provider value={{ state: 'asdasda' }}>\n            {props.children}\n        </AppContext.Provider>\n    );\n};\n\nexport default AppState;\n\n// export const GlobalState = createContext();\n\n// const reducer = (state, action) => {\n//     switch (action.type) {\n//         case 'reset':\n//             return initialState;\n//         case 'categories':\n//             return action.payload;\n//         default:\n//             return state;\n//     }\n// };\n// export const AppProvider = (children) => {\n//     const [state, dispatch] = useState(initialState);\n\n//     // const [clueCount, setClueCount] = useState();\n//     // const [categoryCount, setCategoryCount] = useState([]);\n//     // const [categories, setCategories] = useState([]);\n//     // const [clues, setClues] = useState([]);\n//     // const [validBoard, setValidBoard] = useState(false);\n//     // const [offset, setOffset] = useState(0);\n//     // const [dailyDouble, setDailyDouble] = useState();\n//     // const [answeredClues, setAnsweredClues] = useState([]);\n//     // const [isLoading, setLoading] = useState(true);\n//     // const [initialState, setInitialState] = useState();\n\n//     return (\n//         <GlobalState.Provider value={{ state, dispatch }}>\n//             {children}\n//         </GlobalState.Provider>\n//     );\n// };\n"]},"metadata":{},"sourceType":"module"}
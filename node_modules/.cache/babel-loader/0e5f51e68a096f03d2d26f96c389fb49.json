{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { Component } from 'react';\nimport { AppContext } from '../providers/AppContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nclass Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      clues: [],\n      isLoading: true,\n      offset: 0\n    };\n\n    this.fetchData = async () => {\n      const context = this.context;\n      const dailyDouble = Math.floor(Math.random() * context.clueCount);\n      context.setDailyDouble(dailyDouble);\n\n      try {\n        axios('http://jservice.io/api/categories?count=100').then(async response => {\n          await response.data.map(item => {\n            const {\n              clues_count,\n              id\n            } = item;\n\n            if (clues_count >= context.clueCount && this.state.categories.length < context.categoryCount) {\n              this.setState({\n                categories: this.state.categories.concat(item)\n              });\n              context.setCategories(this.state.categories);\n              axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n                this.setState({\n                  clues: this.state.clues.concat([response.data])\n                });\n                context.setClues(this.state.clues.concat([response.data]));\n\n                if (this.state.clues.length === context.categoryCount) {\n                  this.setState({\n                    isLoading: false,\n                    clueCount: context.clueCount\n                  });\n                  context.setLoading(false);\n                }\n              });\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.resetBoard = () => {\n      this.context.setInitialState(this.context.initialState);\n      this.props.location.push('/');\n    };\n  }\n\n  componentDidMount() {\n    const context = this.context;\n\n    if (context.categories.length > 0 && context.clues.length > 0) {} else {\n      this.fetchData();\n    }\n  }\n\n  shouldComponentUpdate() {\n    if (this.context.isLoading) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const {\n      categories,\n      clueCount,\n      clues\n    } = this.context;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, this.context.isLoading ? /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, \"Creating...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, categories.map((item, index) => {\n      const {\n        title\n      } = item;\n\n      if (clues.length > 0) {\n        const clueArray = clues[index];\n        return /*#__PURE__*/React.createElement(\"ul\", {\n          key: `col-${index}`,\n          className: \"list\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Box, {\n          category: title,\n          className: \"category\",\n          isCategory: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 41\n          }\n        }), clueArray.map((key, index) => {\n          const {\n            value,\n            question,\n            answer,\n            category,\n            id\n          } = key;\n          const {\n            title\n          } = category;\n          const selected = this.context.answeredClues.includes(id);\n\n          if (index < clueCount) {\n            return /*#__PURE__*/React.createElement(Box, {\n              id: id,\n              value: value,\n              question: question,\n              answer: answer,\n              title: title,\n              selected: selected,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 53\n              }\n            });\n          } else {\n            return null;\n          }\n        }));\n      } else {\n        return null;\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.resetBoard(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }, \"reset\")));\n  }\n\n}\n\nBoard.contextType = AppContext;\nexport default withRouter(Board);","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","Component","AppContext","axios","Box","withRouter","Board","state","categories","clues","isLoading","offset","fetchData","context","dailyDouble","Math","floor","random","clueCount","setDailyDouble","then","response","data","map","item","clues_count","id","length","categoryCount","setState","concat","setCategories","setClues","setLoading","error","console","log","resetBoard","setInitialState","initialState","props","location","push","componentDidMount","shouldComponentUpdate","render","index","title","clueArray","key","value","question","answer","category","selected","answeredClues","includes","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { AppContext } from '../providers/AppContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nclass Board extends Component {\n    static contextType = AppContext;\n    state = {\n        categories: [],\n        clues: [],\n        isLoading: true,\n        offset: 0,\n    };\n    componentDidMount() {\n        const context = this.context;\n        if (context.categories.length > 0 && context.clues.length > 0) {\n        } else {\n            this.fetchData();\n        }\n    }\n\n    fetchData = async () => {\n        const context = this.context;\n        const dailyDouble = Math.floor(Math.random() * context.clueCount);\n        context.setDailyDouble(dailyDouble);\n\n        try {\n            axios('http://jservice.io/api/categories?count=100').then(\n                async (response) => {\n                    await response.data.map((item) => {\n                        const { clues_count, id } = item;\n                        if (\n                            clues_count >= context.clueCount &&\n                            this.state.categories.length < context.categoryCount\n                        ) {\n                            this.setState({\n                                categories: this.state.categories.concat(item),\n                            });\n                            context.setCategories(this.state.categories);\n\n                            axios(\n                                `http://jservice.io/api/clues?category=${id}`\n                            ).then((response) => {\n                                this.setState({\n                                    clues: this.state.clues.concat([\n                                        response.data,\n                                    ]),\n                                });\n                                context.setClues(\n                                    this.state.clues.concat([response.data])\n                                );\n\n                                if (\n                                    this.state.clues.length ===\n                                    context.categoryCount\n                                ) {\n                                    this.setState({\n                                        isLoading: false,\n                                        clueCount: context.clueCount,\n                                    });\n                                    context.setLoading(false);\n                                }\n                            });\n                        }\n                    });\n                }\n            );\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    shouldComponentUpdate() {\n        if (this.context.isLoading) {\n            return true;\n        }\n        return false;\n    }\n\n    resetBoard = () => {\n        this.context.setInitialState(this.context.initialState);\n        this.props.location.push('/');\n    };\n\n    render() {\n        const { categories, clueCount, clues } = this.context;\n\n        return (\n            <div className=\"Board\">\n                {this.context.isLoading ? (\n                    <h2>Creating...</h2>\n                ) : (\n                    <React.Fragment>\n                        {categories.map((item, index) => {\n                            const { title } = item;\n                            if (clues.length > 0) {\n                                const clueArray = clues[index];\n                                return (\n                                    <ul key={`col-${index}`} className=\"list\">\n                                        <Box\n                                            category={title}\n                                            className=\"category\"\n                                            isCategory={true}\n                                        />\n                                        {clueArray.map((key, index) => {\n                                            const {\n                                                value,\n                                                question,\n                                                answer,\n                                                category,\n                                                id,\n                                            } = key;\n                                            const { title } = category;\n                                            const selected = this.context.answeredClues.includes(\n                                                id\n                                            );\n\n                                            if (index < clueCount) {\n                                                return (\n                                                    <Box\n                                                        id={id}\n                                                        value={value}\n                                                        question={question}\n                                                        answer={answer}\n                                                        title={title}\n                                                        selected={selected}\n                                                    />\n                                                );\n                                            } else {\n                                                return null;\n                                            }\n                                        })}\n                                    </ul>\n                                );\n                            } else {\n                                return null;\n                            }\n                        })}\n                        <button onClick={this.resetBoard()}>reset</button>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Board);\n"]},"metadata":{},"sourceType":"module"}
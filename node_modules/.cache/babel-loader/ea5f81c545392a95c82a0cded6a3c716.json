{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { Component, useContext, useEffect } from 'react';\nimport { AppContext, GlobalState } from '../providers/GlobalState';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\nexport const Board = props => {\n  const context = useContext(GlobalState);\n  const state = {\n    categories: [],\n    clues: [],\n    isLoading: true,\n    offset: 0\n  };\n  useEffect(() => {\n    if (context.categories.length > 0 && context.clues.length > 0) {} else {\n      this.fetchData();\n    }\n  }, []);\n\n  const fetchData = async () => {\n    const dailyDouble = Math.floor(Math.random() * context.clueCount);\n    context.setDailyDouble(dailyDouble);\n\n    try {\n      axios('http://jservice.io/api/categories?count=100').then(async response => {\n        await response.data.map(item => {\n          const {\n            clues_count,\n            id\n          } = item;\n\n          if (clues_count >= context.clueCount && this.state.categories.length < context.categoryCount) {\n            this.setState({\n              categories: this.state.categories.concat(item)\n            });\n            context.setCategories(this.state.categories);\n            axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n              this.setState({\n                clues: this.state.clues.concat([response.data])\n              });\n              context.setClues(this.state.clues.concat([response.data]));\n\n              if (this.state.clues.length === context.categoryCount) {\n                this.setState({\n                  isLoading: false,\n                  clueCount: context.clueCount\n                });\n                context.setLoading(false);\n              }\n            });\n          }\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  resetBoard = () => {\n    let reset = window.confirm('Are you sure you want to restart?');\n\n    if (reset) {\n      this.props.history.push({\n        pathname: '/'\n      });\n    }\n  };\n\n  const {\n    categories,\n    clueCount,\n    clues\n  } = this.context;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, this.context.isLoading ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, \"Creating...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, categories.map((item, index) => {\n    const {\n      title\n    } = item;\n\n    if (clues.length > 0) {\n      const clueArray = clues[index];\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        key: `col-${index}`,\n        className: \"list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        category: title,\n        className: \"category\",\n        isCategory: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 37\n        }\n      }), clueArray.map((key, index) => {\n        const {\n          value,\n          question,\n          answer,\n          category,\n          id\n        } = key;\n        const {\n          title\n        } = category;\n        const selected = this.context.answeredClues.includes(id);\n\n        if (index < clueCount) {\n          return /*#__PURE__*/React.createElement(Box, {\n            id: id,\n            value: value,\n            question: question,\n            answer: answer,\n            title: title,\n            selected: selected,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 49\n            }\n          });\n        } else {\n          return null;\n        }\n      }));\n    } else {\n      return null;\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      if (window.confirm('Are you sure you want to restart?')) {\n        this.props.history.push('/');\n        this.context.setLoading(true);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, \"reset\")));\n};","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","Component","useContext","useEffect","AppContext","GlobalState","axios","Box","withRouter","Board","props","context","state","categories","clues","isLoading","offset","length","fetchData","dailyDouble","Math","floor","random","clueCount","setDailyDouble","then","response","data","map","item","clues_count","id","categoryCount","setState","concat","setCategories","setClues","setLoading","error","console","log","resetBoard","reset","window","confirm","history","push","pathname","index","title","clueArray","key","value","question","answer","category","selected","answeredClues","includes"],"mappings":"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","sourcesContent":["import React, { Component, useContext, useEffect } from 'react';\nimport { AppContext, GlobalState } from '../providers/GlobalState';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nexport const Board = (props) => {\n    const context = useContext(GlobalState);\n    const state = {\n        categories: [],\n        clues: [],\n        isLoading: true,\n        offset: 0,\n    };\n\n    useEffect(() => {\n        if (context.categories.length > 0 && context.clues.length > 0) {\n        } else {\n            this.fetchData();\n        }\n    }, []);\n\n    const fetchData = async () => {\n        const dailyDouble = Math.floor(Math.random() * context.clueCount);\n        context.setDailyDouble(dailyDouble);\n\n        try {\n            axios('http://jservice.io/api/categories?count=100').then(\n                async (response) => {\n                    await response.data.map((item) => {\n                        const { clues_count, id } = item;\n                        if (\n                            clues_count >= context.clueCount &&\n                            this.state.categories.length < context.categoryCount\n                        ) {\n                            this.setState({\n                                categories: this.state.categories.concat(item),\n                            });\n                            context.setCategories(this.state.categories);\n\n                            axios(\n                                `http://jservice.io/api/clues?category=${id}`\n                            ).then((response) => {\n                                this.setState({\n                                    clues: this.state.clues.concat([\n                                        response.data,\n                                    ]),\n                                });\n                                context.setClues(\n                                    this.state.clues.concat([response.data])\n                                );\n\n                                if (\n                                    this.state.clues.length ===\n                                    context.categoryCount\n                                ) {\n                                    this.setState({\n                                        isLoading: false,\n                                        clueCount: context.clueCount,\n                                    });\n                                    context.setLoading(false);\n                                }\n                            });\n                        }\n                    });\n                }\n            );\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    resetBoard = () => {\n        let reset = window.confirm('Are you sure you want to restart?');\n        if (reset) {\n            this.props.history.push({ pathname: '/' });\n        }\n    };\n\n    const { categories, clueCount, clues } = this.context;\n\n    return (\n        <div className=\"Board\">\n            {this.context.isLoading ? (\n                <h2>Creating...</h2>\n            ) : (\n                <React.Fragment>\n                    {categories.map((item, index) => {\n                        const { title } = item;\n                        if (clues.length > 0) {\n                            const clueArray = clues[index];\n                            return (\n                                <ul key={`col-${index}`} className=\"list\">\n                                    <Box\n                                        category={title}\n                                        className=\"category\"\n                                        isCategory={true}\n                                    />\n                                    {clueArray.map((key, index) => {\n                                        const {\n                                            value,\n                                            question,\n                                            answer,\n                                            category,\n                                            id,\n                                        } = key;\n                                        const { title } = category;\n                                        const selected = this.context.answeredClues.includes(\n                                            id\n                                        );\n\n                                        if (index < clueCount) {\n                                            return (\n                                                <Box\n                                                    id={id}\n                                                    value={value}\n                                                    question={question}\n                                                    answer={answer}\n                                                    title={title}\n                                                    selected={selected}\n                                                />\n                                            );\n                                        } else {\n                                            return null;\n                                        }\n                                    })}\n                                </ul>\n                            );\n                        } else {\n                            return null;\n                        }\n                    })}\n                    <button\n                        onClick={() => {\n                            if (\n                                window.confirm(\n                                    'Are you sure you want to restart?'\n                                )\n                            ) {\n                                this.props.history.push('/');\n                                this.context.setLoading(true);\n                            }\n                        }}\n                    >\n                        reset\n                    </button>\n                </React.Fragment>\n            )}\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
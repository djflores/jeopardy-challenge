{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../context/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nconst Board = props => {\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  const {\n    categories,\n    clues,\n    clueCount,\n    dailyDouble\n  } = state;\n  const boardState = {\n    categories: [],\n    clues: [],\n    isLoading: true,\n    offset: 0\n  };\n  useEffect(() => {\n    if (state.categories.length > 0 && state.clues.length > 0) {} else {\n      fetchData();\n    }\n  }, []);\n\n  const fetchData = async () => {\n    // const dailyDouble = Math.floor(Math.random() * state.clueCount);\n    // state.dailyDouble(dailyDouble);\n    try {\n      axios('http://jservice.io/api/categories?count=100').then(async response => {\n        await response.data.map((item, index) => {\n          const {\n            clues_count,\n            id\n          } = item;\n\n          if (clues_count >= props.location.state.clueCount && index < props.location.state.categoryCount) {\n            dispatch({\n              type: 'setCategories',\n              payload: item\n            });\n            axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n              dispatch({\n                type: 'setClues',\n                payload: response.data\n              });\n\n              if (state.clues.length === state.categoryCount) {\n                boardState({\n                  isLoading: false,\n                  clueCount: state.clueCount\n                });\n              }\n            });\n          }\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const resetBoard = () => {\n    let reset = window.confirm('Are you sure you want to restart?');\n\n    if (reset) {\n      this.props.history.push({\n        pathname: '/'\n      });\n    }\n  }; //const { categories, clueCount, clues } = state;\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, boardState.isLoading ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, \"Creating...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, categories.map((item, index) => {\n    const {\n      title\n    } = item;\n\n    if (clues.length > 0) {\n      const clueArray = clues[index];\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        key: `col-${index}`,\n        className: \"list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        category: title,\n        className: \"category\",\n        isCategory: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 37\n        }\n      }), clueArray.map((key, index) => {\n        const {\n          value,\n          question,\n          answer,\n          category,\n          id\n        } = key;\n        const {\n          title\n        } = category;\n        const selected = state.answeredClues.includes(id);\n\n        if (index < clueCount) {\n          return /*#__PURE__*/React.createElement(Box, {\n            id: id,\n            value: value,\n            question: question,\n            answer: answer,\n            title: title,\n            selected: selected,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 49\n            }\n          });\n        } else {\n          return null;\n        }\n      }));\n    } else {\n      return null;\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      if (window.confirm('Are you sure you want to restart?')) {\n        this.props.history.push('/');\n        state.setLoading(true);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, \"reset\")));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","useContext","useEffect","useState","AppContext","axios","Box","withRouter","Board","props","state","dispatch","categories","clues","clueCount","dailyDouble","boardState","isLoading","offset","length","fetchData","then","response","data","map","item","index","clues_count","id","location","categoryCount","type","payload","error","console","log","resetBoard","reset","window","confirm","history","push","pathname","title","clueArray","key","value","question","answer","category","selected","answeredClues","includes","setLoading"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../context/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nconst Board = (props) => {\n    const { state, dispatch } = useContext(AppContext);\n    const { categories, clues, clueCount, dailyDouble } = state;\n    const boardState = {\n        categories: [],\n        clues: [],\n        isLoading: true,\n        offset: 0,\n    };\n\n    useEffect(() => {\n        if (state.categories.length > 0 && state.clues.length > 0) {\n        } else {\n            fetchData();\n        }\n    }, []);\n\n    const fetchData = async () => {\n        // const dailyDouble = Math.floor(Math.random() * state.clueCount);\n        // state.dailyDouble(dailyDouble);\n\n        try {\n            axios('http://jservice.io/api/categories?count=100').then(\n                async (response) => {\n                    await response.data.map((item, index) => {\n                        const { clues_count, id } = item;\n                        if (\n                            clues_count >= props.location.state.clueCount &&\n                            index < props.location.state.categoryCount\n                        ) {\n                            dispatch({\n                                type: 'setCategories',\n                                payload: item,\n                            });\n                            axios(\n                                `http://jservice.io/api/clues?category=${id}`\n                            ).then((response) => {\n                                dispatch({\n                                    type: 'setClues',\n                                    payload: response.data,\n                                });\n\n                                if (\n                                    state.clues.length === state.categoryCount\n                                ) {\n                                    boardState({\n                                        isLoading: false,\n                                        clueCount: state.clueCount,\n                                    });\n                                }\n                            });\n                        }\n                    });\n                }\n            );\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const resetBoard = () => {\n        let reset = window.confirm('Are you sure you want to restart?');\n        if (reset) {\n            this.props.history.push({ pathname: '/' });\n        }\n    };\n\n    //const { categories, clueCount, clues } = state;\n\n    return (\n        <div className=\"Board\">\n            {boardState.isLoading ? (\n                <h2>Creating...</h2>\n            ) : (\n                <React.Fragment>\n                    {categories.map((item, index) => {\n                        const { title } = item;\n                        if (clues.length > 0) {\n                            const clueArray = clues[index];\n                            return (\n                                <ul key={`col-${index}`} className=\"list\">\n                                    <Box\n                                        category={title}\n                                        className=\"category\"\n                                        isCategory={true}\n                                    />\n                                    {clueArray.map((key, index) => {\n                                        const {\n                                            value,\n                                            question,\n                                            answer,\n                                            category,\n                                            id,\n                                        } = key;\n                                        const { title } = category;\n                                        const selected = state.answeredClues.includes(\n                                            id\n                                        );\n\n                                        if (index < clueCount) {\n                                            return (\n                                                <Box\n                                                    id={id}\n                                                    value={value}\n                                                    question={question}\n                                                    answer={answer}\n                                                    title={title}\n                                                    selected={selected}\n                                                />\n                                            );\n                                        } else {\n                                            return null;\n                                        }\n                                    })}\n                                </ul>\n                            );\n                        } else {\n                            return null;\n                        }\n                    })}\n                    <button\n                        onClick={() => {\n                            if (\n                                window.confirm(\n                                    'Are you sure you want to restart?'\n                                )\n                            ) {\n                                this.props.history.push('/');\n                                state.setLoading(true);\n                            }\n                        }}\n                    >\n                        reset\n                    </button>\n                </React.Fragment>\n            )}\n        </div>\n    );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}
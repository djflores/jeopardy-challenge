{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { useContext, useEffect } from 'react';\nimport AppContext from '../context/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\n\nconst Board = props => {\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  const {\n    categories,\n    clues,\n    dailyDouble,\n    isLoading,\n    offset,\n    usedCategories\n  } = state;\n  const {\n    categoryCount,\n    clueCount\n  } = props.location.state;\n  let count = 0;\n  useEffect(() => {\n    if (state.categories.length <= 0 && state.clues.length <= 0) {\n      fetchData();\n    }\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      axios(`http://jservice.io/api/categories?count=${offset}`).then(async response => {\n        response.data.map(item => {\n          const {\n            clues_count,\n            id\n          } = item;\n\n          if (clues_count >= clueCount && count <= categoryCount && usedCategories.includes(id) === false) {\n            dispatch({\n              type: 'setCategories',\n              payload: item\n            });\n            dispatch({\n              type: 'usedCategories',\n              payload: id\n            });\n            axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n              dispatch({\n                type: 'setClues',\n                payload: response.data\n              });\n              dispatch({\n                type: 'dailyDouble',\n                payload: Math.floor(Math.random() * clueCount)\n              });\n            });\n            count = count + 1;\n          }\n        });\n      }).catch(error => console.log(error)).finally(() => {\n        dispatch({\n          type: 'isLoading',\n          payload: false\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const resetBoard = () => {\n    let reset = window.confirm('Are you sure you want to restart?');\n\n    if (reset) {\n      dispatch({\n        type: 'reset'\n      });\n      props.history.push({\n        pathname: '/'\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, \"Creating...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetBoard,\n    className: \"reset-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, \"reset\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"board-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, categories.map((item, index) => {\n    const {\n      id: categoryId\n    } = item;\n    const clueArray = clues[index];\n\n    if (index < categoryCount && clueArray !== undefined && clueArray[index] !== undefined) {\n      const {\n        category\n      } = clueArray[index];\n      const {\n        title\n      } = category;\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        key: `col-${index}`,\n        className: \"list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        category: title,\n        className: \"category\",\n        isCategory: true,\n        key: `category-${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 41\n        }\n      }), clueArray.map((key, index) => {\n        const {\n          value,\n          question,\n          answer,\n          category,\n          id\n        } = key;\n        const {\n          title\n        } = category;\n        const selected = state.answeredClues.includes(id);\n        const isDD = dailyDouble.id === categoryId && dailyDouble.index === index ? true : false;\n\n        if (index < props.location.state.clueCount) {\n          return /*#__PURE__*/React.createElement(Box, {\n            id: id,\n            value: value,\n            question: question,\n            answer: answer,\n            title: title,\n            selected: selected,\n            dailyDouble: isDD,\n            key: `clue-${index}`,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 56\n            }\n          });\n        }\n      }));\n    } else {\n      return '';\n    }\n  }))));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","useContext","useEffect","AppContext","axios","Box","Board","props","state","dispatch","categories","clues","dailyDouble","isLoading","offset","usedCategories","categoryCount","clueCount","location","count","length","fetchData","then","response","data","map","item","clues_count","id","includes","type","payload","Math","floor","random","catch","error","console","log","finally","resetBoard","reset","window","confirm","history","push","pathname","index","categoryId","clueArray","undefined","category","title","key","value","question","answer","selected","answeredClues","isDD"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACrB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBR,UAAU,CAACE,UAAD,CAAtC;AACA,QAAM;AAAEO,IAAAA,UAAF;AAAcC,IAAAA,KAAd;AAAqBC,IAAAA,WAArB;AAAkCC,IAAAA,SAAlC;AAA6CC,IAAAA,MAA7C;AAAqDC,IAAAA;AAArD,MAAwEP,KAA9E;AACA,QAAM;AAAEQ,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAA+BV,KAAK,CAACW,QAAN,CAAeV,KAApD;AACA,MAAIW,KAAK,GAAG,CAAZ;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,KAAK,CAACE,UAAN,CAAiBU,MAAjB,IAA2B,CAA3B,IAAgCZ,KAAK,CAACG,KAAN,CAAYS,MAAZ,IAAsB,CAA1D,EAA6D;AACzDC,MAAAA,SAAS;AACZ;AACJ,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMA,SAAS,GAAG,YAAY;AAC1B,QAAI;AACAjB,MAAAA,KAAK,CAAE,2CAA0CU,MAAO,EAAnD,CAAL,CACKQ,IADL,CACU,MAAOC,QAAP,IAAoB;AACtBA,QAAAA,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAmBC,IAAD,IAAU;AACxB,gBAAM;AAAEC,YAAAA,WAAF;AAAeC,YAAAA;AAAf,cAAsBF,IAA5B;;AAEA,cAAIC,WAAW,IAAIV,SAAf,IAA4BE,KAAK,IAAIH,aAArC,IAAsDD,cAAc,CAACc,QAAf,CAAwBD,EAAxB,MAAgC,KAA1F,EAAiG;AAC7FnB,YAAAA,QAAQ,CAAC;AACLqB,cAAAA,IAAI,EAAE,eADD;AAELC,cAAAA,OAAO,EAAEL;AAFJ,aAAD,CAAR;AAKAjB,YAAAA,QAAQ,CAAC;AACLqB,cAAAA,IAAI,EAAE,gBADD;AAELC,cAAAA,OAAO,EAAEH;AAFJ,aAAD,CAAR;AAKAxB,YAAAA,KAAK,CAAE,yCAAwCwB,EAAG,EAA7C,CAAL,CAAqDN,IAArD,CAA2DC,QAAD,IAAc;AACpEd,cAAAA,QAAQ,CAAC;AACLqB,gBAAAA,IAAI,EAAE,UADD;AAELC,gBAAAA,OAAO,EAAER,QAAQ,CAACC;AAFb,eAAD,CAAR;AAKAf,cAAAA,QAAQ,CAAC;AACLqB,gBAAAA,IAAI,EAAE,aADD;AAELC,gBAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,SAA3B;AAFJ,eAAD,CAAR;AAIH,aAVD;AAWAE,YAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACH;AACJ,SA3BD;AA4BH,OA9BL,EA+BKgB,KA/BL,CA+BYC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CA/BtB,EAgCKG,OAhCL,CAgCa,MAAM;AACX9B,QAAAA,QAAQ,CAAC;AACLqB,UAAAA,IAAI,EAAE,WADD;AAELC,UAAAA,OAAO,EAAE;AAFJ,SAAD,CAAR;AAIH,OArCL;AAsCH,KAvCD,CAuCE,OAAOK,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GA3CD;;AA6CA,QAAMI,UAAU,GAAG,MAAM;AACrB,QAAIC,KAAK,GAAGC,MAAM,CAACC,OAAP,CAAe,mCAAf,CAAZ;;AACA,QAAIF,KAAJ,EAAW;AACPhC,MAAAA,QAAQ,CAAC;AAAEqB,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACAvB,MAAAA,KAAK,CAACqC,OAAN,CAAcC,IAAd,CAAmB;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAnB;AACH;AACJ,GAND;;AAQA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKjC,SAAS,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADM,gBAGN,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,OAAO,EAAE2B,UAAjB;AAA6B,IAAA,SAAS,EAAC,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAII;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK9B,UAAU,CAACe,GAAX,CAAe,CAACC,IAAD,EAAOqB,KAAP,KAAiB;AAC7B,UAAM;AAAEnB,MAAAA,EAAE,EAAEoB;AAAN,QAAqBtB,IAA3B;AACA,UAAMuB,SAAS,GAAGtC,KAAK,CAACoC,KAAD,CAAvB;;AAEA,QAAIA,KAAK,GAAG/B,aAAR,IAAyBiC,SAAS,KAAKC,SAAvC,IAAoDD,SAAS,CAACF,KAAD,CAAT,KAAqBG,SAA7E,EAAwF;AACpF,YAAM;AAAEC,QAAAA;AAAF,UAAeF,SAAS,CAACF,KAAD,CAA9B;AACA,YAAM;AAAEK,QAAAA;AAAF,UAAYD,QAAlB;AACA,0BACI;AAAI,QAAA,GAAG,EAAG,OAAMJ,KAAM,EAAtB;AAAyB,QAAA,SAAS,EAAC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAEK,KAAf;AAAsB,QAAA,SAAS,EAAC,UAAhC;AAA2C,QAAA,UAAU,EAAE,IAAvD;AAA6D,QAAA,GAAG,EAAG,YAAWL,KAAM,EAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEKE,SAAS,CAACxB,GAAV,CAAc,CAAC4B,GAAD,EAAMN,KAAN,KAAgB;AAC3B,cAAM;AAAEO,UAAAA,KAAF;AAASC,UAAAA,QAAT;AAAmBC,UAAAA,MAAnB;AAA2BL,UAAAA,QAA3B;AAAqCvB,UAAAA;AAArC,YAA4CyB,GAAlD;AACA,cAAM;AAAED,UAAAA;AAAF,YAAYD,QAAlB;AACA,cAAMM,QAAQ,GAAGjD,KAAK,CAACkD,aAAN,CAAoB7B,QAApB,CAA6BD,EAA7B,CAAjB;AACA,cAAM+B,IAAI,GAAG/C,WAAW,CAACgB,EAAZ,KAAmBoB,UAAnB,IAAiCpC,WAAW,CAACmC,KAAZ,KAAsBA,KAAvD,GAA+D,IAA/D,GAAsE,KAAnF;;AAEA,YAAIA,KAAK,GAAGxC,KAAK,CAACW,QAAN,CAAeV,KAAf,CAAqBS,SAAjC,EAA4C;AACxC,8BAAO,oBAAC,GAAD;AAAK,YAAA,EAAE,EAAEW,EAAT;AAAa,YAAA,KAAK,EAAE0B,KAApB;AAA2B,YAAA,QAAQ,EAAEC,QAArC;AAA+C,YAAA,MAAM,EAAEC,MAAvD;AAA+D,YAAA,KAAK,EAAEJ,KAAtE;AAA6E,YAAA,QAAQ,EAAEK,QAAvF;AAAiG,YAAA,WAAW,EAAEE,IAA9G;AAAoH,YAAA,GAAG,EAAG,QAAOZ,KAAM,EAAvI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AACJ,OATA,CAFL,CADJ;AAeH,KAlBD,MAkBO;AACH,aAAO,EAAP;AACH;AACJ,GAzBA,CADL,CAJJ,CAJR,CADJ;AAyCH,CA1GD;;AA4GA,eAAezC,KAAf","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport AppContext from '../context/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\n\nconst Board = (props) => {\n    const { state, dispatch } = useContext(AppContext);\n    const { categories, clues, dailyDouble, isLoading, offset, usedCategories } = state;\n    const { categoryCount, clueCount } = props.location.state;\n    let count = 0;\n\n    useEffect(() => {\n        if (state.categories.length <= 0 && state.clues.length <= 0) {\n            fetchData();\n        }\n    }, []);\n\n    const fetchData = async () => {\n        try {\n            axios(`http://jservice.io/api/categories?count=${offset}`)\n                .then(async (response) => {\n                    response.data.map((item) => {\n                        const { clues_count, id } = item;\n\n                        if (clues_count >= clueCount && count <= categoryCount && usedCategories.includes(id) === false) {\n                            dispatch({\n                                type: 'setCategories',\n                                payload: item,\n                            });\n\n                            dispatch({\n                                type: 'usedCategories',\n                                payload: id,\n                            });\n\n                            axios(`http://jservice.io/api/clues?category=${id}`).then((response) => {\n                                dispatch({\n                                    type: 'setClues',\n                                    payload: response.data,\n                                });\n\n                                dispatch({\n                                    type: 'dailyDouble',\n                                    payload: Math.floor(Math.random() * clueCount),\n                                });\n                            });\n                            count = count + 1;\n                        }\n                    });\n                })\n                .catch((error) => console.log(error))\n                .finally(() => {\n                    dispatch({\n                        type: 'isLoading',\n                        payload: false,\n                    });\n                });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const resetBoard = () => {\n        let reset = window.confirm('Are you sure you want to restart?');\n        if (reset) {\n            dispatch({ type: 'reset' });\n            props.history.push({ pathname: '/' });\n        }\n    };\n\n    return (\n        <div className=\"Board\">\n            {isLoading ? (\n                <h2>Creating...</h2>\n            ) : (\n                <React.Fragment>\n                    <button onClick={resetBoard} className=\"reset-btn\">\n                        reset\n                    </button>\n                    <div className=\"board-container\">\n                        {categories.map((item, index) => {\n                            const { id: categoryId } = item;\n                            const clueArray = clues[index];\n\n                            if (index < categoryCount && clueArray !== undefined && clueArray[index] !== undefined) {\n                                const { category } = clueArray[index];\n                                const { title } = category;\n                                return (\n                                    <ul key={`col-${index}`} className=\"list\">\n                                        <Box category={title} className=\"category\" isCategory={true} key={`category-${index}`} />\n                                        {clueArray.map((key, index) => {\n                                            const { value, question, answer, category, id } = key;\n                                            const { title } = category;\n                                            const selected = state.answeredClues.includes(id);\n                                            const isDD = dailyDouble.id === categoryId && dailyDouble.index === index ? true : false;\n\n                                            if (index < props.location.state.clueCount) {\n                                                return <Box id={id} value={value} question={question} answer={answer} title={title} selected={selected} dailyDouble={isDD} key={`clue-${index}`} />;\n                                            }\n                                        })}\n                                    </ul>\n                                );\n                            } else {\n                                return '';\n                            }\n                        })}\n                    </div>\n                </React.Fragment>\n            )}\n        </div>\n    );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/components/Box.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../context/appContext';\nimport { withRouter } from 'react-router-dom';\n\nconst Box = props => {\n  const context = useContext(AppContext);\n  const [clue, setClue] = useState();\n  const {\n    isCategory,\n    category,\n    value\n  } = props;\n  const {\n    selected\n  } = clue;\n  useEffect(() => {\n    const {\n      question,\n      id,\n      answer,\n      title\n    } = props;\n    const state = {\n      question: question,\n      answer: answer,\n      title: title,\n      id: id,\n      selected: selected\n    };\n    setClue(state);\n  }, []);\n\n  const handleClick = e => {\n    const {\n      question,\n      id,\n      title\n    } = clue;\n    context.setAnsweredClues(context.answeredClues.concat(id));\n    this.props.history.push({\n      pathname: `/clue/${id}`,\n      state: {\n        question: question,\n        clue: title\n      }\n    });\n  };\n\n  if (isCategory) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      className: \"category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 16\n      }\n    }, category);\n  } else {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      className: \"clue\",\n      onClick: handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, selected ? '' : value);\n  }\n};\n\nexport default withRouter(Box);","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/components/Box.js"],"names":["React","useContext","useEffect","useState","AppContext","withRouter","Box","props","context","clue","setClue","isCategory","category","value","selected","question","id","answer","title","state","handleClick","e","setAnsweredClues","answeredClues","concat","history","push","pathname"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AACnB,QAAMC,OAAO,GAAGP,UAAU,CAACG,UAAD,CAA1B;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AACA,QAAM;AAAEQ,IAAAA,UAAF;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA;AAAxB,MAAkCN,KAAxC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAeL,IAArB;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEa,MAAAA,QAAF;AAAYC,MAAAA,EAAZ;AAAgBC,MAAAA,MAAhB;AAAwBC,MAAAA;AAAxB,QAAkCX,KAAxC;AACA,UAAMY,KAAK,GAAG;AACVJ,MAAAA,QAAQ,EAAEA,QADA;AAEVE,MAAAA,MAAM,EAAEA,MAFE;AAGVC,MAAAA,KAAK,EAAEA,KAHG;AAIVF,MAAAA,EAAE,EAAEA,EAJM;AAKVF,MAAAA,QAAQ,EAAEA;AALA,KAAd;AAQAJ,IAAAA,OAAO,CAACS,KAAD,CAAP;AACH,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACvB,UAAM;AAAEN,MAAAA,QAAF;AAAYC,MAAAA,EAAZ;AAAgBE,MAAAA;AAAhB,QAA0BT,IAAhC;AACAD,IAAAA,OAAO,CAACc,gBAAR,CAAyBd,OAAO,CAACe,aAAR,CAAsBC,MAAtB,CAA6BR,EAA7B,CAAzB;AACA,SAAKT,KAAL,CAAWkB,OAAX,CAAmBC,IAAnB,CAAwB;AACpBC,MAAAA,QAAQ,EAAG,SAAQX,EAAG,EADF;AAEpBG,MAAAA,KAAK,EAAE;AAAEJ,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBN,QAAAA,IAAI,EAAES;AAA5B;AAFa,KAAxB;AAIH,GAPD;;AASA,MAAIP,UAAJ,EAAgB;AACZ,wBAAO;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BC,QAA1B,CAAP;AACH,GAFD,MAEO;AACH,wBACI;AAAI,MAAA,SAAS,EAAC,MAAd;AAAqB,MAAA,OAAO,EAAEQ,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKN,QAAQ,GAAG,EAAH,GAAQD,KADrB,CADJ;AAKH;AACJ,CArCD;;AAuCA,eAAeR,UAAU,CAACC,GAAD,CAAzB","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../context/appContext';\nimport { withRouter } from 'react-router-dom';\n\nconst Box = (props) => {\n    const context = useContext(AppContext);\n    const [clue, setClue] = useState();\n    const { isCategory, category, value } = props;\n    const { selected } = clue;\n\n    useEffect(() => {\n        const { question, id, answer, title } = props;\n        const state = {\n            question: question,\n            answer: answer,\n            title: title,\n            id: id,\n            selected: selected,\n        };\n\n        setClue(state);\n    }, []);\n\n    const handleClick = (e) => {\n        const { question, id, title } = clue;\n        context.setAnsweredClues(context.answeredClues.concat(id));\n        this.props.history.push({\n            pathname: `/clue/${id}`,\n            state: { question: question, clue: title },\n        });\n    };\n\n    if (isCategory) {\n        return <li className=\"category\">{category}</li>;\n    } else {\n        return (\n            <li className=\"clue\" onClick={handleClick}>\n                {selected ? '' : value}\n            </li>\n        );\n    }\n};\n\nexport default withRouter(Box);\n"]},"metadata":{},"sourceType":"module"}
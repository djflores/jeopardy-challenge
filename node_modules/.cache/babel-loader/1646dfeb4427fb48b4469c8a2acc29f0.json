{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/components/Box.js\";\nimport React, { Component, useContext, useEffect } from 'react';\nimport { GlobalState } from '../providers/GlobalState';\nimport { withRouter } from 'react-router-dom';\n\nconst Box = props => {\n  const context = useContext(GlobalState);\n  const state = {\n    isCategory: false\n  };\n  useEffect(() => {\n    const {\n      question,\n      id,\n      answer,\n      title,\n      selected\n    } = props;\n    state = {\n      question: question,\n      answer: answer,\n      title: title,\n      id: id,\n      selected: selected\n    };\n  }, []);\n\n  handleClick = e => {\n    const context = this.context;\n    const {\n      question,\n      id,\n      title\n    } = this.state;\n    context.setAnsweredClues(context.answeredClues.concat(id));\n    this.props.history.push({\n      pathname: `/clue/${id}`,\n      state: {\n        question: question,\n        clue: title\n      }\n    });\n  };\n\n  const {\n    isCategory,\n    category,\n    value\n  } = this.props;\n  const {\n    selected\n  } = this.state;\n\n  if (isCategory) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      className: \"category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 16\n      }\n    }, category);\n  } else {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      className: \"clue\",\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, selected ? '' : value);\n  }\n};\n\nexport default withRouter(Box);","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/components/Box.js"],"names":["React","Component","useContext","useEffect","GlobalState","withRouter","Box","props","context","state","isCategory","question","id","answer","title","selected","handleClick","e","setAnsweredClues","answeredClues","concat","history","push","pathname","clue","category","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AACnB,QAAMC,OAAO,GAAGN,UAAU,CAACE,WAAD,CAA1B;AACA,QAAMK,KAAK,GAAG;AACVC,IAAAA,UAAU,EAAE;AADF,GAAd;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEQ,MAAAA,QAAF;AAAYC,MAAAA,EAAZ;AAAgBC,MAAAA,MAAhB;AAAwBC,MAAAA,KAAxB;AAA+BC,MAAAA;AAA/B,QAA4CR,KAAlD;AACAE,IAAAA,KAAK,GAAG;AACJE,MAAAA,QAAQ,EAAEA,QADN;AAEJE,MAAAA,MAAM,EAAEA,MAFJ;AAGJC,MAAAA,KAAK,EAAEA,KAHH;AAIJF,MAAAA,EAAE,EAAEA,EAJA;AAKJG,MAAAA,QAAQ,EAAEA;AALN,KAAR;AAOH,GATQ,EASN,EATM,CAAT;;AAWAC,EAAAA,WAAW,GAAIC,CAAD,IAAO;AACjB,UAAMT,OAAO,GAAG,KAAKA,OAArB;AACA,UAAM;AAAEG,MAAAA,QAAF;AAAYC,MAAAA,EAAZ;AAAgBE,MAAAA;AAAhB,QAA0B,KAAKL,KAArC;AACAD,IAAAA,OAAO,CAACU,gBAAR,CAAyBV,OAAO,CAACW,aAAR,CAAsBC,MAAtB,CAA6BR,EAA7B,CAAzB;AACA,SAAKL,KAAL,CAAWc,OAAX,CAAmBC,IAAnB,CAAwB;AACpBC,MAAAA,QAAQ,EAAG,SAAQX,EAAG,EADF;AAEpBH,MAAAA,KAAK,EAAE;AAAEE,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBa,QAAAA,IAAI,EAAEV;AAA5B;AAFa,KAAxB;AAIH,GARD;;AAUA,QAAM;AAAEJ,IAAAA,UAAF;AAAce,IAAAA,QAAd;AAAwBC,IAAAA;AAAxB,MAAkC,KAAKnB,KAA7C;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAe,KAAKN,KAA1B;;AACA,MAAIC,UAAJ,EAAgB;AACZ,wBAAO;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0Be,QAA1B,CAAP;AACH,GAFD,MAEO;AACH,wBACI;AAAI,MAAA,SAAS,EAAC,MAAd;AAAqB,MAAA,OAAO,EAAE,KAAKT,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,QAAQ,GAAG,EAAH,GAAQW,KADrB,CADJ;AAKH;AACJ,CAtCD;;AAwCA,eAAerB,UAAU,CAACC,GAAD,CAAzB","sourcesContent":["import React, { Component, useContext, useEffect } from 'react';\nimport { GlobalState } from '../providers/GlobalState';\nimport { withRouter } from 'react-router-dom';\n\nconst Box = (props) => {\n    const context = useContext(GlobalState);\n    const state = {\n        isCategory: false,\n    };\n\n    useEffect(() => {\n        const { question, id, answer, title, selected } = props;\n        state = {\n            question: question,\n            answer: answer,\n            title: title,\n            id: id,\n            selected: selected,\n        };\n    }, []);\n\n    handleClick = (e) => {\n        const context = this.context;\n        const { question, id, title } = this.state;\n        context.setAnsweredClues(context.answeredClues.concat(id));\n        this.props.history.push({\n            pathname: `/clue/${id}`,\n            state: { question: question, clue: title },\n        });\n    };\n\n    const { isCategory, category, value } = this.props;\n    const { selected } = this.state;\n    if (isCategory) {\n        return <li className=\"category\">{category}</li>;\n    } else {\n        return (\n            <li className=\"clue\" onClick={this.handleClick}>\n                {selected ? '' : value}\n            </li>\n        );\n    }\n};\n\nexport default withRouter(Box);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/components/Box.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../context/appContext';\nimport { useHistory, withRouter } from 'react-router-dom';\n\nconst Box = props => {\n  const history = useHistory();\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  const {\n    question,\n    id,\n    answer,\n    title\n  } = props;\n  const [clue, setClue] = useState({\n    question: '',\n    answer: '',\n    title: '',\n    id: ''\n  });\n  const {\n    isCategory,\n    category,\n    value,\n    dailyDouble\n  } = props;\n  useEffect(() => {\n    setClue({\n      question: question,\n      answer: answer,\n      title: title,\n      id: id,\n      dailyDouble: dailyDouble\n    });\n  }, [question, answer, title, id, dailyDouble]);\n\n  const handleClick = e => {\n    const {\n      question,\n      id,\n      title,\n      dailyDouble\n    } = clue;\n    dispatch({\n      type: 'answeredClues',\n      payload: id\n    });\n    history.push({\n      pathname: `/clue/${id}`,\n      state: {\n        question: question,\n        clue: title,\n        dailyDouble: dailyDouble\n      }\n    });\n  };\n\n  if (isCategory) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      className: \"category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 16\n      }\n    }, category);\n  } else {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      onClick: handleClick,\n      className: `clue ${state.answeredClues.includes(id) ? 'selected' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, value);\n  }\n};\n\nexport default withRouter(Box);","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/components/Box.js"],"names":["React","useContext","useEffect","useState","AppContext","useHistory","withRouter","Box","props","history","state","dispatch","question","id","answer","title","clue","setClue","isCategory","category","value","dailyDouble","handleClick","e","type","payload","push","pathname","answeredClues","includes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,kBAAvC;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AACnB,QAAMC,OAAO,GAAGJ,UAAU,EAA1B;AACA,QAAM;AAAEK,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBV,UAAU,CAACG,UAAD,CAAtC;AACA,QAAM;AAAEQ,IAAAA,QAAF;AAAYC,IAAAA,EAAZ;AAAgBC,IAAAA,MAAhB;AAAwBC,IAAAA;AAAxB,MAAkCP,KAAxC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC;AAC7BS,IAAAA,QAAQ,EAAE,EADmB;AAE7BE,IAAAA,MAAM,EAAE,EAFqB;AAG7BC,IAAAA,KAAK,EAAE,EAHsB;AAI7BF,IAAAA,EAAE,EAAE;AAJyB,GAAD,CAAhC;AAMA,QAAM;AAAEK,IAAAA,UAAF;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA,KAAxB;AAA+BC,IAAAA;AAA/B,MAA+Cb,KAArD;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,OAAO,CAAC;AACJL,MAAAA,QAAQ,EAAEA,QADN;AAEJE,MAAAA,MAAM,EAAEA,MAFJ;AAGJC,MAAAA,KAAK,EAAEA,KAHH;AAIJF,MAAAA,EAAE,EAAEA,EAJA;AAKJQ,MAAAA,WAAW,EAAEA;AALT,KAAD,CAAP;AAOH,GARQ,EAQN,CAACT,QAAD,EAAWE,MAAX,EAAmBC,KAAnB,EAA0BF,EAA1B,EAA8BQ,WAA9B,CARM,CAAT;;AAUA,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACvB,UAAM;AAAEX,MAAAA,QAAF;AAAYC,MAAAA,EAAZ;AAAgBE,MAAAA,KAAhB;AAAuBM,MAAAA;AAAvB,QAAuCL,IAA7C;AACAL,IAAAA,QAAQ,CAAC;AAAEa,MAAAA,IAAI,EAAE,eAAR;AAAyBC,MAAAA,OAAO,EAAEZ;AAAlC,KAAD,CAAR;AACAJ,IAAAA,OAAO,CAACiB,IAAR,CAAa;AACTC,MAAAA,QAAQ,EAAG,SAAQd,EAAG,EADb;AAETH,MAAAA,KAAK,EAAE;AAAEE,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBI,QAAAA,IAAI,EAAED,KAA5B;AAAmCM,QAAAA,WAAW,EAAEA;AAAhD;AAFE,KAAb;AAIH,GAPD;;AASA,MAAIH,UAAJ,EAAgB;AACZ,wBAAO;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BC,QAA1B,CAAP;AACH,GAFD,MAEO;AACH,wBACI;AAAI,MAAA,OAAO,EAAEG,WAAb;AAA0B,MAAA,SAAS,EAAG,QAAOZ,KAAK,CAACkB,aAAN,CAAoBC,QAApB,CAA6BhB,EAA7B,IAAmC,UAAnC,GAAgD,EAAG,EAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKO,KADL,CADJ;AAKH;AACJ,CAxCD;;AA0CA,eAAed,UAAU,CAACC,GAAD,CAAzB","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../context/appContext';\nimport { useHistory, withRouter } from 'react-router-dom';\n\nconst Box = (props) => {\n    const history = useHistory();\n    const { state, dispatch } = useContext(AppContext);\n    const { question, id, answer, title } = props;\n    const [clue, setClue] = useState({\n        question: '',\n        answer: '',\n        title: '',\n        id: '',\n    });\n    const { isCategory, category, value, dailyDouble } = props;\n\n    useEffect(() => {\n        setClue({\n            question: question,\n            answer: answer,\n            title: title,\n            id: id,\n            dailyDouble: dailyDouble,\n        });\n    }, [question, answer, title, id, dailyDouble]);\n\n    const handleClick = (e) => {\n        const { question, id, title, dailyDouble } = clue;\n        dispatch({ type: 'answeredClues', payload: id });\n        history.push({\n            pathname: `/clue/${id}`,\n            state: { question: question, clue: title, dailyDouble: dailyDouble },\n        });\n    };\n\n    if (isCategory) {\n        return <li className=\"category\">{category}</li>;\n    } else {\n        return (\n            <li onClick={handleClick} className={`clue ${state.answeredClues.includes(id) ? 'selected' : ''}`}>\n                {value}\n            </li>\n        );\n    }\n};\n\nexport default withRouter(Box);\n"]},"metadata":{},"sourceType":"module"}
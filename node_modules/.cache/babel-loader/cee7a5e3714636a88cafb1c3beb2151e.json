{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { Component } from 'react';\nimport { AppContext } from '../providers/AppContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nexport default class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      clues: [],\n      isLoading: true,\n      offset: 0\n    };\n\n    this.fetchData = async () => {\n      const context = this.context;\n      const dailyDouble = Math.floor(Math.random() * context.clueCount);\n      context.setDailyDouble(dailyDouble);\n\n      try {\n        axios('http://jservice.io/api/categories?count=100').then(async response => {\n          await response.data.map(item => {\n            const {\n              clues_count,\n              id\n            } = item;\n\n            if (clues_count >= context.clueCount && this.state.categories.length < context.categoryCount) {\n              this.setState({\n                categories: this.state.categories.concat(item)\n              });\n              axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n                this.setState({\n                  clues: this.state.clues.concat([response.data])\n                });\n\n                if (this.state.clues.length === context.categoryCount) {\n                  this.setState({\n                    isLoading: false,\n                    clueCount: context.clueCount\n                  });\n                }\n              });\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n  }\n\n  componentDidMount() {\n    const context = this.context;\n\n    if (context.categories.length > 0 && context.clues.length > 0) {} else {\n      this.fetchData();\n    }\n  }\n\n  shouldComponentUpdate() {\n    if (this.state.isLoading) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const value = this.context;\n    const {\n      categories,\n      clues,\n      offset,\n      clueCount\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, this.state.isLoading ? /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, \"Creating...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, categories.map((item, index) => {\n      const {\n        title\n      } = item;\n\n      if (clues.length > 0) {\n        const clueArray = clues[index];\n        return /*#__PURE__*/React.createElement(\"ul\", {\n          key: `col-${index}`,\n          className: \"list\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Box, {\n          category: title,\n          className: \"category\",\n          isCategory: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 41\n          }\n        }), clueArray.map((key, index) => {\n          const {\n            value,\n            question,\n            answer,\n            category,\n            id\n          } = key;\n          const {\n            title\n          } = category;\n          const selected = this.context.answeredClues.includes(id);\n\n          if (index < clueCount) {\n            return /*#__PURE__*/React.createElement(Box, {\n              id: id,\n              value: value,\n              question: question,\n              answer: answer,\n              title: title,\n              selected: selected,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 53\n              }\n            });\n          } else {\n            return null;\n          }\n        }));\n      } else {\n        return null;\n      }\n    })));\n  }\n\n}\nBoard.contextType = AppContext;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","Component","AppContext","axios","Box","Board","state","categories","clues","isLoading","offset","fetchData","context","dailyDouble","Math","floor","random","clueCount","setDailyDouble","then","response","data","map","item","clues_count","id","length","categoryCount","setState","concat","error","console","log","componentDidMount","shouldComponentUpdate","render","value","index","title","clueArray","key","question","answer","category","selected","answeredClues","includes","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { AppContext } from '../providers/AppContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\n\nexport default class Board extends Component {\n    static contextType = AppContext;\n    state = {\n        categories: [],\n        clues: [],\n        isLoading: true,\n        offset: 0,\n    };\n    componentDidMount() {\n        const context = this.context;\n        if (context.categories.length > 0 && context.clues.length > 0) {\n        } else {\n            this.fetchData();\n        }\n    }\n\n    fetchData = async () => {\n        const context = this.context;\n        const dailyDouble = Math.floor(Math.random() * context.clueCount);\n        context.setDailyDouble(dailyDouble);\n\n        try {\n            axios('http://jservice.io/api/categories?count=100').then(\n                async (response) => {\n                    await response.data.map((item) => {\n                        const { clues_count, id } = item;\n                        if (\n                            clues_count >= context.clueCount &&\n                            this.state.categories.length < context.categoryCount\n                        ) {\n                            this.setState({\n                                categories: this.state.categories.concat(item),\n                            });\n\n                            axios(\n                                `http://jservice.io/api/clues?category=${id}`\n                            ).then((response) => {\n                                this.setState({\n                                    clues: this.state.clues.concat([\n                                        response.data,\n                                    ]),\n                                });\n                                if (\n                                    this.state.clues.length ===\n                                    context.categoryCount\n                                ) {\n                                    this.setState({\n                                        isLoading: false,\n                                        clueCount: context.clueCount,\n                                    });\n                                }\n                            });\n                        }\n                    });\n                }\n            );\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    shouldComponentUpdate() {\n        if (this.state.isLoading) {\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        const value = this.context;\n        const { categories, clues, offset, clueCount } = this.state;\n\n        return (\n            <div className=\"Board\">\n                {this.state.isLoading ? (\n                    <h2>Creating...</h2>\n                ) : (\n                    <React.Fragment>\n                        {categories.map((item, index) => {\n                            const { title } = item;\n                            if (clues.length > 0) {\n                                const clueArray = clues[index];\n                                return (\n                                    <ul key={`col-${index}`} className=\"list\">\n                                        <Box\n                                            category={title}\n                                            className=\"category\"\n                                            isCategory={true}\n                                        />\n                                        {clueArray.map((key, index) => {\n                                            const {\n                                                value,\n                                                question,\n                                                answer,\n                                                category,\n                                                id,\n                                            } = key;\n                                            const { title } = category;\n                                            const selected = this.context.answeredClues.includes(\n                                                id\n                                            );\n\n                                            if (index < clueCount) {\n                                                return (\n                                                    <Box\n                                                        id={id}\n                                                        value={value}\n                                                        question={question}\n                                                        answer={answer}\n                                                        title={title}\n                                                        selected={selected}\n                                                    />\n                                                );\n                                            } else {\n                                                return null;\n                                            }\n                                        })}\n                                    </ul>\n                                );\n                            } else {\n                                return null;\n                            }\n                        })}\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { Component, useContext, useEffect, useState } from 'react';\nimport { AppContext } from '../providers/AppContext';\nimport axios from 'axios';\nexport default function Board() {\n  const board = useContext(AppContext);\n  const [validBoard, setValidBoard] = useState(false);\n  const [categories, setCategories] = useState([]);\n\n  const init = async () => {\n    try {\n      axios('http://jservice.io/api/categories?count=100').then(response => {\n        response.data.map(async (item, index) => {\n          const {\n            clues_count\n          } = item;\n\n          if (clues_count >= board.categoryCount) {}\n\n          console.log(board.categories);\n          board.setCategories([item]);\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    init();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }\n  }, \"this is a board\");\n}","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","Component","useContext","useEffect","useState","AppContext","axios","Board","board","validBoard","setValidBoard","categories","setCategories","init","then","response","data","map","item","index","clues_count","categoryCount","console","log","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,SAAvC,EAAkDC,QAAlD,QAAkE,OAAlE;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,KAAT,GAAiB;AAC5B,QAAMC,KAAK,GAAGN,UAAU,CAACG,UAAD,CAAxB;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMS,IAAI,GAAG,YAAY;AACrB,QAAI;AACAP,MAAAA,KAAK,CAAC,6CAAD,CAAL,CAAqDQ,IAArD,CACKC,QAAD,IAAc;AACVA,QAAAA,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkB,OAAOC,IAAP,EAAaC,KAAb,KAAuB;AACrC,gBAAM;AAAEC,YAAAA;AAAF,cAAkBF,IAAxB;;AACA,cAAIE,WAAW,IAAIZ,KAAK,CAACa,aAAzB,EAAwC,CACvC;;AACDC,UAAAA,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACG,UAAlB;AACAH,UAAAA,KAAK,CAACI,aAAN,CAAoB,CAACM,IAAD,CAApB;AACH,SAND;AAOH,OATL;AAWH,KAZD,CAYE,OAAOM,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACJ,GAhBD;;AAkBArB,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,IAAI;AACP,GAFQ,EAEN,EAFM,CAAT;AAIA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACH","sourcesContent":["import React, { Component, useContext, useEffect, useState } from 'react';\nimport { AppContext } from '../providers/AppContext';\nimport axios from 'axios';\n\nexport default function Board() {\n    const board = useContext(AppContext);\n    const [validBoard, setValidBoard] = useState(false);\n    const [categories, setCategories] = useState([]);\n\n    const init = async () => {\n        try {\n            axios('http://jservice.io/api/categories?count=100').then(\n                (response) => {\n                    response.data.map(async (item, index) => {\n                        const { clues_count } = item;\n                        if (clues_count >= board.categoryCount) {\n                        }\n                        console.log(board.categories);\n                        board.setCategories([item]);\n                    });\n                }\n            );\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    return <div>this is a board</div>;\n}\n"]},"metadata":{},"sourceType":"module"}
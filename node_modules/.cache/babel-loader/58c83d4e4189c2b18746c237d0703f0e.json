{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { Component } from 'react';\nimport { AppContext } from '../providers/AppContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nexport default class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      clues: [],\n      isLoading: true,\n      offset: 0\n    };\n  }\n\n  componentDidMount() {\n    let value = this.context;\n\n    try {\n      axios('http://jservice.io/api/categories?count=100').then(async response => {\n        await response.data.map(item => {\n          const {\n            clues_count,\n            id\n          } = item;\n\n          if (clues_count >= value.clueCount && this.state.categories.length < value.categoryCount) {\n            this.setState({\n              categories: this.state.categories.concat(item)\n            });\n            axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n              this.setState({\n                clues: this.state.clues.concat([response.data])\n              });\n            });\n          }\n        });\n        this.setState({\n          isLoading: false\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    const {\n      categories,\n      clues,\n      offset\n    } = this.state;\n    const value = this.context;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, this.state.isLoading ? /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, \"Loading...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, categories.map((item, index) => {\n      const {\n        title,\n        id\n      } = item;\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        key: `col-${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        category: title,\n        className: \"category\",\n        isCategory: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 37\n        }\n      }), clues.map((item, index) => {\n        const clue = clues[index];\n        console.log(clue);\n        return item.map(clue => {\n          const {\n            value,\n            question,\n            category_id\n          } = clue;\n          return /*#__PURE__*/React.createElement(Box, {\n            value: value,\n            question: question,\n            category: category_id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 49\n            }\n          });\n        });\n      }));\n    })));\n  }\n\n}\nBoard.contextType = AppContext;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","Component","AppContext","axios","Box","Board","state","categories","clues","isLoading","offset","componentDidMount","value","context","then","response","data","map","item","clues_count","id","clueCount","length","categoryCount","setState","concat","error","console","log","render","index","title","clue","question","category_id","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { AppContext } from '../providers/AppContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\n\nexport default class Board extends Component {\n    static contextType = AppContext;\n    state = {\n        categories: [],\n        clues: [],\n        isLoading: true,\n        offset: 0,\n    };\n    componentDidMount() {\n        let value = this.context;\n        try {\n            axios('http://jservice.io/api/categories?count=100').then(\n                async (response) => {\n                    await response.data.map((item) => {\n                        const { clues_count, id } = item;\n                        if (\n                            clues_count >= value.clueCount &&\n                            this.state.categories.length < value.categoryCount\n                        ) {\n                            this.setState({\n                                categories: this.state.categories.concat(item),\n                            });\n\n                            axios(\n                                `http://jservice.io/api/clues?category=${id}`\n                            ).then((response) => {\n                                this.setState({\n                                    clues: this.state.clues.concat([\n                                        response.data,\n                                    ]),\n                                });\n                            });\n                        }\n                    });\n                    this.setState({\n                        isLoading: false,\n                    });\n                }\n            );\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    render() {\n        const { categories, clues, offset } = this.state;\n        const value = this.context;\n\n        return (\n            <div className=\"Board\">\n                {this.state.isLoading ? (\n                    <h2>Loading...</h2>\n                ) : (\n                    <React.Fragment>\n                        {categories.map((item, index) => {\n                            const { title, id } = item;\n                            return (\n                                <ul key={`col-${index}`}>\n                                    <Box\n                                        category={title}\n                                        className=\"category\"\n                                        isCategory={true}\n                                    />\n\n                                    {clues.map((item, index) => {\n                                        const clue = clues[index];\n                                        console.log(clue);\n                                        return item.map((clue) => {\n                                            const {\n                                                value,\n                                                question,\n                                                category_id,\n                                            } = clue;\n\n                                            return (\n                                                <Box\n                                                    value={value}\n                                                    question={question}\n                                                    category={category_id}\n                                                />\n                                            );\n                                        });\n                                    })}\n                                </ul>\n                            );\n                        })}\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
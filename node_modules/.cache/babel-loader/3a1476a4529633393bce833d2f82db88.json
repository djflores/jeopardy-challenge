{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../providers/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nconst Board = props => {\n  const {\n    state\n  } = useContext(AppContext);\n  const boardState = {\n    categories: [],\n    clues: [],\n    isLoading: true,\n    offset: 0\n  };\n  useEffect(() => {\n    console.log(state); // if (state.categories.length > 0 && state.clues.length > 0) {\n    // } else {\n    //     this.fetchData();\n    // }\n  }, []); // const fetchData = async () => {\n  //     const dailyDouble = Math.floor(Math.random() * state.clueCount);\n  //     state.setDailyDouble(dailyDouble);\n  //     try {\n  //         axios('http://jservice.io/api/categories?count=100').then(\n  //             async (response) => {\n  //                 await response.data.map((item) => {\n  //                     const { clues_count, id } = item;\n  //                     if (\n  //                         clues_count >= state.clueCount &&\n  //                         this.state.categories.length < state.categoryCount\n  //                     ) {\n  //                         this.setState({\n  //                             categories: this.state.categories.concat(item),\n  //                         });\n  //                         state.setCategories(this.state.categories);\n  //                         axios(\n  //                             `http://jservice.io/api/clues?category=${id}`\n  //                         ).then((response) => {\n  //                             this.setState({\n  //                                 clues: this.state.clues.concat([\n  //                                     response.data,\n  //                                 ]),\n  //                             });\n  //                             state.setClues(\n  //                                 this.state.clues.concat([response.data])\n  //                             );\n  //                             if (\n  //                                 this.state.clues.length ===\n  //                                 state.categoryCount\n  //                             ) {\n  //                                 this.setState({\n  //                                     isLoading: false,\n  //                                     clueCount: state.clueCount,\n  //                                 });\n  //                                 state.setLoading(false);\n  //                             }\n  //                         });\n  //                     }\n  //                 });\n  //             }\n  //         );\n  //     } catch (error) {\n  //         console.log(error);\n  //     }\n  // };\n\n  const resetBoard = () => {\n    let reset = window.confirm('Are you sure you want to restart?');\n\n    if (reset) {\n      this.props.history.push({\n        pathname: '/'\n      });\n    }\n  }; //const { categories, clueCount, clues } = state;\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, true ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, \"Creating...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","useContext","useEffect","useState","AppContext","axios","Box","withRouter","Board","props","state","boardState","categories","clues","isLoading","offset","console","log","resetBoard","reset","window","confirm","history","push","pathname"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAYT,UAAU,CAACG,UAAD,CAA5B;AACA,QAAMO,UAAU,GAAG;AACfC,IAAAA,UAAU,EAAE,EADG;AAEfC,IAAAA,KAAK,EAAE,EAFQ;AAGfC,IAAAA,SAAS,EAAE,IAHI;AAIfC,IAAAA,MAAM,EAAE;AAJO,GAAnB;AAOAb,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ,EADY,CAEZ;AACA;AACA;AACA;AACH,GANQ,EAMN,EANM,CAAT,CATqB,CAiBrB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMQ,UAAU,GAAG,MAAM;AACrB,QAAIC,KAAK,GAAGC,MAAM,CAACC,OAAP,CAAe,mCAAf,CAAZ;;AACA,QAAIF,KAAJ,EAAW;AACP,WAAKV,KAAL,CAAWa,OAAX,CAAmBC,IAAnB,CAAwB;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAxB;AACH;AACJ,GALD,CAnEqB,CA0ErB;;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,oBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADH,gBAGG,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJR,CADJ;AAqEH,CAjJD;;AAmJA,eAAehB,KAAf","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../providers/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nconst Board = (props) => {\n    const { state } = useContext(AppContext);\n    const boardState = {\n        categories: [],\n        clues: [],\n        isLoading: true,\n        offset: 0,\n    };\n\n    useEffect(() => {\n        console.log(state);\n        // if (state.categories.length > 0 && state.clues.length > 0) {\n        // } else {\n        //     this.fetchData();\n        // }\n    }, []);\n\n    // const fetchData = async () => {\n    //     const dailyDouble = Math.floor(Math.random() * state.clueCount);\n    //     state.setDailyDouble(dailyDouble);\n\n    //     try {\n    //         axios('http://jservice.io/api/categories?count=100').then(\n    //             async (response) => {\n    //                 await response.data.map((item) => {\n    //                     const { clues_count, id } = item;\n    //                     if (\n    //                         clues_count >= state.clueCount &&\n    //                         this.state.categories.length < state.categoryCount\n    //                     ) {\n    //                         this.setState({\n    //                             categories: this.state.categories.concat(item),\n    //                         });\n    //                         state.setCategories(this.state.categories);\n\n    //                         axios(\n    //                             `http://jservice.io/api/clues?category=${id}`\n    //                         ).then((response) => {\n    //                             this.setState({\n    //                                 clues: this.state.clues.concat([\n    //                                     response.data,\n    //                                 ]),\n    //                             });\n    //                             state.setClues(\n    //                                 this.state.clues.concat([response.data])\n    //                             );\n\n    //                             if (\n    //                                 this.state.clues.length ===\n    //                                 state.categoryCount\n    //                             ) {\n    //                                 this.setState({\n    //                                     isLoading: false,\n    //                                     clueCount: state.clueCount,\n    //                                 });\n    //                                 state.setLoading(false);\n    //                             }\n    //                         });\n    //                     }\n    //                 });\n    //             }\n    //         );\n    //     } catch (error) {\n    //         console.log(error);\n    //     }\n    // };\n\n    const resetBoard = () => {\n        let reset = window.confirm('Are you sure you want to restart?');\n        if (reset) {\n            this.props.history.push({ pathname: '/' });\n        }\n    };\n\n    //const { categories, clueCount, clues } = state;\n\n    return (\n        <div className=\"Board\">\n            {true ? (\n                <h2>Creating...</h2>\n            ) : (\n                <React.Fragment>\n                    {/* {categories.map((item, index) => {\n                        const { title } = item;\n                        if (clues.length > 0) {\n                            const clueArray = clues[index];\n                            return (\n                                <ul key={`col-${index}`} className=\"list\">\n                                    <Box\n                                        category={title}\n                                        className=\"category\"\n                                        isCategory={true}\n                                    />\n                                    {clueArray.map((key, index) => {\n                                        const {\n                                            value,\n                                            question,\n                                            answer,\n                                            category,\n                                            id,\n                                        } = key;\n                                        const { title } = category;\n                                        const selected = this.state.answeredClues.includes(\n                                            id\n                                        );\n\n                                        if (index < clueCount) {\n                                            return (\n                                                <Box\n                                                    id={id}\n                                                    value={value}\n                                                    question={question}\n                                                    answer={answer}\n                                                    title={title}\n                                                    selected={selected}\n                                                />\n                                            );\n                                        } else {\n                                            return null;\n                                        }\n                                    })}\n                                </ul>\n                            );\n                        } else {\n                            return null;\n                        }\n                    })}\n                    <button\n                        onClick={() => {\n                            if (\n                                window.confirm(\n                                    'Are you sure you want to restart?'\n                                )\n                            ) {\n                                this.props.history.push('/');\n                                this.state.setLoading(true);\n                            }\n                        }}\n                    >\n                        reset\n                    </button> */}\n                </React.Fragment>\n            )}\n        </div>\n    );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}
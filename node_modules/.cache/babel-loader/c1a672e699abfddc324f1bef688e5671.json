{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/providers/GlobalState.js\";\nimport React, { createContext, useReducer } from 'react';\nexport const GlobalState = createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  const initialState = {\n    categories: [],\n    clues: [],\n    validBoard: false,\n    offset: 0,\n    dailyDouble: 0,\n    answeredClues: [],\n    isLoading: true\n  };\n\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case 'reset':\n        return initialState;\n\n      case 'categories':\n        return action.payload;\n\n      default:\n        return '';\n    }\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = {\n    state,\n    dispatch\n  }; // const [clueCount, setClueCount] = useState();\n  // const [categoryCount, setCategoryCount] = useState([]);\n  // const [categories, setCategories] = useState([]);\n  // const [clues, setClues] = useState([]);\n  // const [validBoard, setValidBoard] = useState(false);\n  // const [offset, setOffset] = useState(0);\n  // const [dailyDouble, setDailyDouble] = useState();\n  // const [answeredClues, setAnsweredClues] = useState([]);\n  // const [isLoading, setLoading] = useState(true);\n  // const [initialState, setInitialState] = useState();\n\n  return /*#__PURE__*/React.createElement(GlobalState.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/providers/GlobalState.js"],"names":["React","createContext","useReducer","GlobalState","AppProvider","children","initialState","categories","clues","validBoard","offset","dailyDouble","answeredClues","isLoading","reducer","state","action","type","payload","dispatch","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AAEA,OAAO,MAAMC,WAAW,GAAGF,aAAa,EAAjC;AAEP,OAAO,MAAMG,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACzC,QAAMC,YAAY,GAAG;AACjBC,IAAAA,UAAU,EAAE,EADK;AAEjBC,IAAAA,KAAK,EAAE,EAFU;AAGjBC,IAAAA,UAAU,EAAE,KAHK;AAIjBC,IAAAA,MAAM,EAAE,CAJS;AAKjBC,IAAAA,WAAW,EAAE,CALI;AAMjBC,IAAAA,aAAa,EAAE,EANE;AAOjBC,IAAAA,SAAS,EAAE;AAPM,GAArB;;AAUA,QAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAK,OAAL;AACI,eAAOX,YAAP;;AACJ,WAAK,YAAL;AACI,eAAOU,MAAM,CAACE,OAAd;;AACJ;AACI,eAAO,EAAP;AANR;AAQH,GATD;;AAUA,QAAM,CAACH,KAAD,EAAQI,QAAR,IAAoBjB,UAAU,CAACY,OAAD,EAAUR,YAAV,CAApC;AACA,QAAMc,KAAK,GAAG;AAAEL,IAAAA,KAAF;AAASI,IAAAA;AAAT,GAAd,CAtByC,CAuBzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCf,QAArC,CADJ;AAGH,CArCM","sourcesContent":["import React, { createContext, useReducer } from 'react';\n\nexport const GlobalState = createContext();\n\nexport const AppProvider = ({ children }) => {\n    const initialState = {\n        categories: [],\n        clues: [],\n        validBoard: false,\n        offset: 0,\n        dailyDouble: 0,\n        answeredClues: [],\n        isLoading: true,\n    };\n\n    const reducer = (state, action) => {\n        switch (action.type) {\n            case 'reset':\n                return initialState;\n            case 'categories':\n                return action.payload;\n            default:\n                return '';\n        }\n    };\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const value = { state, dispatch };\n    // const [clueCount, setClueCount] = useState();\n    // const [categoryCount, setCategoryCount] = useState([]);\n    // const [categories, setCategories] = useState([]);\n    // const [clues, setClues] = useState([]);\n    // const [validBoard, setValidBoard] = useState(false);\n    // const [offset, setOffset] = useState(0);\n    // const [dailyDouble, setDailyDouble] = useState();\n    // const [answeredClues, setAnsweredClues] = useState([]);\n    // const [isLoading, setLoading] = useState(true);\n    // const [initialState, setInitialState] = useState();\n\n    return (\n        <GlobalState.Provider value={value}>{children}</GlobalState.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
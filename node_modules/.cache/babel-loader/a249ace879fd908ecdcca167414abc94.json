{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/components/Box.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { AppContext } from '../providers/AppContext';\nexport default class Box extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isCategory: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props;\n    const context = this.context;\n    let count = context.offset;\n\n    if (!this.state.isCategory) {\n      axios(`http://jservice.io/api/clues?category=${id}&offset=${context.offset}`).then(response => {\n        console.log(response.data);\n        this.setState({\n          clue: response.data\n        });\n      });\n    }\n\n    count = count + 1;\n    context.setOffset(count);\n  }\n\n  renderBox() {\n    const {\n      isCategory,\n      id\n    } = this.props;\n    const {\n      clue\n    } = this.state;\n    const context = this.context;\n\n    if (isCategory) {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 20\n        }\n      }, this.props.category);\n    } else {\n      return Array(context.clueCount).fill( /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 50\n        }\n      }, \"$\"));\n    }\n  }\n\n  render() {\n    return this.renderBox();\n  }\n\n}\nBox.contextType = AppContext;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/components/Box.js"],"names":["React","Component","axios","AppContext","Box","state","isCategory","componentDidMount","id","props","context","count","offset","then","response","console","log","data","setState","clue","setOffset","renderBox","category","Array","clueCount","fill","render","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AAEA,eAAe,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAEvCI,KAFuC,GAE/B;AACJC,MAAAA,UAAU,EAAE;AADR,KAF+B;AAAA;;AAMvCC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEC,MAAAA;AAAF,QAAS,KAAKC,KAApB;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB;AACA,QAAIC,KAAK,GAAGD,OAAO,CAACE,MAApB;;AAEA,QAAI,CAAC,KAAKP,KAAL,CAAWC,UAAhB,EAA4B;AACxBJ,MAAAA,KAAK,CACA,yCAAwCM,EAAG,WAAUE,OAAO,CAACE,MAAO,EADpE,CAAL,CAEEC,IAFF,CAEQC,QAAD,IAAc;AACjBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACA,aAAKC,QAAL,CAAc;AACVC,UAAAA,IAAI,EAAEL,QAAQ,CAACG;AADL,SAAd;AAGH,OAPD;AAQH;;AACDN,IAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACAD,IAAAA,OAAO,CAACU,SAAR,CAAkBT,KAAlB;AACH;;AAEDU,EAAAA,SAAS,GAAG;AACR,UAAM;AAAEf,MAAAA,UAAF;AAAcE,MAAAA;AAAd,QAAqB,KAAKC,KAAhC;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAW,KAAKd,KAAtB;AACA,UAAMK,OAAO,GAAG,KAAKA,OAArB;;AACA,QAAIJ,UAAJ,EAAgB;AACZ,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKG,KAAL,CAAWa,QAAhB,CAAP;AACH,KAFD,MAEO;AACH,aAAOC,KAAK,CAACb,OAAO,CAACc,SAAT,CAAL,CAAyBC,IAAzB,eAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA9B,CAAP;AACH;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKL,SAAL,EAAP;AACH;;AAtCsC;AAAtBjB,G,CACVuB,W,GAAcxB,U","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { AppContext } from '../providers/AppContext';\n\nexport default class Box extends Component {\n    static contextType = AppContext;\n    state = {\n        isCategory: false,\n    };\n\n    componentDidMount() {\n        const { id } = this.props;\n        const context = this.context;\n        let count = context.offset;\n\n        if (!this.state.isCategory) {\n            axios(\n                `http://jservice.io/api/clues?category=${id}&offset=${context.offset}`\n            ).then((response) => {\n                console.log(response.data);\n                this.setState({\n                    clue: response.data,\n                });\n            });\n        }\n        count = count + 1;\n        context.setOffset(count);\n    }\n\n    renderBox() {\n        const { isCategory, id } = this.props;\n        const { clue } = this.state;\n        const context = this.context;\n        if (isCategory) {\n            return <li>{this.props.category}</li>;\n        } else {\n            return Array(context.clueCount).fill(<li>$</li>);\n        }\n    }\n\n    render() {\n        return this.renderBox();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { useContext, useEffect } from 'react';\nimport GlobalState from '../providers/GlobalState';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nconst Board = props => {\n  //const { state, dispatch } = useContext(GlobalState);\n  const boardState = {\n    categories: [],\n    clues: [],\n    isLoading: true,\n    offset: 0\n  };\n  useEffect(() => {// if (state.categories.length > 0 && state.clues.length > 0) {\n    // } else {\n    //     this.fetchData();\n    // }\n  }, []);\n\n  const fetchData = async () => {\n    const dailyDouble = Math.floor(Math.random() * state.clueCount);\n    state.setDailyDouble(dailyDouble);\n\n    try {\n      axios('http://jservice.io/api/categories?count=100').then(async response => {\n        await response.data.map(item => {\n          const {\n            clues_count,\n            id\n          } = item;\n\n          if (clues_count >= state.clueCount && this.state.categories.length < state.categoryCount) {\n            this.setState({\n              categories: this.state.categories.concat(item)\n            });\n            state.setCategories(this.state.categories);\n            axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n              this.setState({\n                clues: this.state.clues.concat([response.data])\n              });\n              state.setClues(this.state.clues.concat([response.data]));\n\n              if (this.state.clues.length === state.categoryCount) {\n                this.setState({\n                  isLoading: false,\n                  clueCount: state.clueCount\n                });\n                state.setLoading(false);\n              }\n            });\n          }\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const resetBoard = () => {\n    let reset = window.confirm('Are you sure you want to restart?');\n\n    if (reset) {\n      this.props.history.push({\n        pathname: '/'\n      });\n    }\n  }; //const { categories, clueCount, clues } = state;\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, true ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, \"Creating...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","useContext","useEffect","GlobalState","axios","Box","withRouter","Board","props","boardState","categories","clues","isLoading","offset","fetchData","dailyDouble","Math","floor","random","state","clueCount","setDailyDouble","then","response","data","map","item","clues_count","id","length","categoryCount","setState","concat","setCategories","setClues","setLoading","error","console","log","resetBoard","reset","window","confirm","history","push","pathname"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport GlobalState from '../providers/GlobalState';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nconst Board = (props) => {\n    //const { state, dispatch } = useContext(GlobalState);\n    const boardState = {\n        categories: [],\n        clues: [],\n        isLoading: true,\n        offset: 0,\n    };\n\n    useEffect(() => {\n        // if (state.categories.length > 0 && state.clues.length > 0) {\n        // } else {\n        //     this.fetchData();\n        // }\n    }, []);\n\n    const fetchData = async () => {\n        const dailyDouble = Math.floor(Math.random() * state.clueCount);\n        state.setDailyDouble(dailyDouble);\n\n        try {\n            axios('http://jservice.io/api/categories?count=100').then(\n                async (response) => {\n                    await response.data.map((item) => {\n                        const { clues_count, id } = item;\n                        if (\n                            clues_count >= state.clueCount &&\n                            this.state.categories.length < state.categoryCount\n                        ) {\n                            this.setState({\n                                categories: this.state.categories.concat(item),\n                            });\n                            state.setCategories(this.state.categories);\n\n                            axios(\n                                `http://jservice.io/api/clues?category=${id}`\n                            ).then((response) => {\n                                this.setState({\n                                    clues: this.state.clues.concat([\n                                        response.data,\n                                    ]),\n                                });\n                                state.setClues(\n                                    this.state.clues.concat([response.data])\n                                );\n\n                                if (\n                                    this.state.clues.length ===\n                                    state.categoryCount\n                                ) {\n                                    this.setState({\n                                        isLoading: false,\n                                        clueCount: state.clueCount,\n                                    });\n                                    state.setLoading(false);\n                                }\n                            });\n                        }\n                    });\n                }\n            );\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const resetBoard = () => {\n        let reset = window.confirm('Are you sure you want to restart?');\n        if (reset) {\n            this.props.history.push({ pathname: '/' });\n        }\n    };\n\n    //const { categories, clueCount, clues } = state;\n\n    return (\n        <div className=\"Board\">\n            {true ? (\n                <h2>Creating...</h2>\n            ) : (\n                <React.Fragment>\n                    {/* {categories.map((item, index) => {\n                        const { title } = item;\n                        if (clues.length > 0) {\n                            const clueArray = clues[index];\n                            return (\n                                <ul key={`col-${index}`} className=\"list\">\n                                    <Box\n                                        category={title}\n                                        className=\"category\"\n                                        isCategory={true}\n                                    />\n                                    {clueArray.map((key, index) => {\n                                        const {\n                                            value,\n                                            question,\n                                            answer,\n                                            category,\n                                            id,\n                                        } = key;\n                                        const { title } = category;\n                                        const selected = this.state.answeredClues.includes(\n                                            id\n                                        );\n\n                                        if (index < clueCount) {\n                                            return (\n                                                <Box\n                                                    id={id}\n                                                    value={value}\n                                                    question={question}\n                                                    answer={answer}\n                                                    title={title}\n                                                    selected={selected}\n                                                />\n                                            );\n                                        } else {\n                                            return null;\n                                        }\n                                    })}\n                                </ul>\n                            );\n                        } else {\n                            return null;\n                        }\n                    })}\n                    <button\n                        onClick={() => {\n                            if (\n                                window.confirm(\n                                    'Are you sure you want to restart?'\n                                )\n                            ) {\n                                this.props.history.push('/');\n                                this.state.setLoading(true);\n                            }\n                        }}\n                    >\n                        reset\n                    </button> */}\n                </React.Fragment>\n            )}\n        </div>\n    );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}
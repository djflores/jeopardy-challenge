{"ast":null,"code":"var _jsxFileName = \"/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../context/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nconst Board = props => {\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  const {\n    categories,\n    clues,\n    clueCount,\n    dailyDouble\n  } = state;\n  const [boardState, setBoardState] = useState({\n    categories: [],\n    clues: [],\n    isLoading: true,\n    offset: 0\n  });\n  useEffect(() => {\n    if (state.categories.length > 0 && state.clues.length > 0) {} else {\n      fetchData();\n    }\n  }, [boardState.isLoading]);\n\n  const fetchData = async () => {\n    // const dailyDouble = Math.floor(Math.random() * state.clueCount);\n    // state.dailyDouble(dailyDouble);\n    try {\n      axios('http://jservice.io/api/categories?count=100').then(async response => {\n        await response.data.map((item, index) => {\n          const {\n            id\n          } = item;\n\n          if (index < props.location.state.categoryCount) {\n            dispatch({\n              type: 'setCategories',\n              payload: item\n            });\n            axios(`http://jservice.io/api/clues?category=${id}`).then(response => {\n              dispatch({\n                type: 'setClues',\n                payload: response.data\n              });\n              setBoardState({\n                isLoading: false\n              });\n            });\n          }\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const resetBoard = () => {\n    let reset = window.confirm('Are you sure you want to restart?');\n\n    if (reset) {\n      this.props.history.push({\n        pathname: '/'\n      });\n    }\n  }; //const { categories, clueCount, clues } = state;\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, boardState.isLoading ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, \"Creating...\") : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, categories.map((item, index) => {\n    const {\n      title\n    } = item;\n    const clueArray = clues[index];\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      key: `col-${index}`,\n      className: \"list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      category: title,\n      className: \"category\",\n      isCategory: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }), clueArray ? clueArray.map((key, index) => {\n      const {\n        value,\n        question,\n        answer,\n        category,\n        id\n      } = key;\n      const {\n        title\n      } = category;\n      const selected = state.answeredClues.includes(id);\n      return /*#__PURE__*/React.createElement(Box, {\n        id: id,\n        value: value,\n        question: question,\n        answer: answer,\n        title: title,\n        selected: selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 47\n        }\n      });\n    }) : '');\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      if (window.confirm('Are you sure you want to restart?')) {\n        this.props.history.push('/');\n        state.setLoading(true);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, \"reset\")));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/damionflores/Desktop/code/jeopardy-challenge/src/views/Board.js"],"names":["React","useContext","useEffect","useState","AppContext","axios","Box","withRouter","Board","props","state","dispatch","categories","clues","clueCount","dailyDouble","boardState","setBoardState","isLoading","offset","length","fetchData","then","response","data","map","item","index","id","location","categoryCount","type","payload","error","console","log","resetBoard","reset","window","confirm","history","push","pathname","title","clueArray","key","value","question","answer","category","selected","answeredClues","includes","setLoading"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport AppContext from '../context/appContext';\nimport axios from 'axios';\nimport Box from '../components/Box';\nimport { withRouter } from 'react-router-dom';\n\nconst Board = (props) => {\n    const { state, dispatch } = useContext(AppContext);\n    const { categories, clues, clueCount, dailyDouble } = state;\n    const [boardState, setBoardState] = useState({\n        categories: [],\n        clues: [],\n        isLoading: true,\n        offset: 0,\n    });\n\n    useEffect(() => {\n        if (state.categories.length > 0 && state.clues.length > 0) {\n        } else {\n            fetchData();\n        }\n    }, [boardState.isLoading]);\n\n    const fetchData = async () => {\n        // const dailyDouble = Math.floor(Math.random() * state.clueCount);\n        // state.dailyDouble(dailyDouble);\n\n        try {\n            axios('http://jservice.io/api/categories?count=100').then(\n                async (response) => {\n                    await response.data.map((item, index) => {\n                        const { id } = item;\n                        if (index < props.location.state.categoryCount) {\n                            dispatch({\n                                type: 'setCategories',\n                                payload: item,\n                            });\n                            axios(\n                                `http://jservice.io/api/clues?category=${id}`\n                            ).then((response) => {\n                                dispatch({\n                                    type: 'setClues',\n                                    payload: response.data,\n                                });\n\n                                setBoardState({ isLoading: false });\n                            });\n                        }\n                    });\n                }\n            );\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const resetBoard = () => {\n        let reset = window.confirm('Are you sure you want to restart?');\n        if (reset) {\n            this.props.history.push({ pathname: '/' });\n        }\n    };\n\n    //const { categories, clueCount, clues } = state;\n\n    return (\n        <div className=\"Board\">\n            {boardState.isLoading ? (\n                <h2>Creating...</h2>\n            ) : (\n                <React.Fragment>\n                    {categories.map((item, index) => {\n                        const { title } = item;\n                        const clueArray = clues[index];\n                        return (\n                            <ul key={`col-${index}`} className=\"list\">\n                                <Box\n                                    category={title}\n                                    className=\"category\"\n                                    isCategory={true}\n                                />\n                                {clueArray\n                                    ? clueArray.map((key, index) => {\n                                          const {\n                                              value,\n                                              question,\n                                              answer,\n                                              category,\n                                              id,\n                                          } = key;\n                                          const { title } = category;\n                                          const selected = state.answeredClues.includes(\n                                              id\n                                          );\n                                          return (\n                                              <Box\n                                                  id={id}\n                                                  value={value}\n                                                  question={question}\n                                                  answer={answer}\n                                                  title={title}\n                                                  selected={selected}\n                                              />\n                                          );\n                                      })\n                                    : ''}\n                            </ul>\n                        );\n                    })}\n                    <button\n                        onClick={() => {\n                            if (\n                                window.confirm(\n                                    'Are you sure you want to restart?'\n                                )\n                            ) {\n                                this.props.history.push('/');\n                                state.setLoading(true);\n                            }\n                        }}\n                    >\n                        reset\n                    </button>\n                </React.Fragment>\n            )}\n        </div>\n    );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}